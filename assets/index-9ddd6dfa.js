var Ce=Object.defineProperty;var we=(r,e,t)=>e in r?Ce(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var I=(r,e,t)=>(we(r,typeof e!="symbol"?e+"":e,t),t);var z=(r,e,t)=>new Promise((a,s)=>{var n=l=>{try{o(t.next(l))}catch(f){s(f)}},i=l=>{try{o(t.throw(l))}catch(f){s(f)}},o=l=>l.done?a(l.value):Promise.resolve(l.value).then(n,i);o((t=t.apply(r,e)).next())});import{d as ne,r as $,c as j,o as m,a as v,b as u,t as d,F as ae,e as oe,n as A,f as se,u as g,g as w,w as Pe,h as ze,i as te,j as $e,k as Fe}from"./vue-vendor-ed91baa0.js";import{x as ke}from"./pokemon-api-e9e98d61.js";import{s as Oe,a as je}from"./http-client-7ddc9825.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function a(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();const Ee={Normal:{Rock:.5,Steel:.5,Ghost:0},Fire:{Fire:.5,Water:.5,Rock:.5,Dragon:.5,Grass:2,Ice:2,Bug:2,Steel:2},Water:{Water:.5,Grass:.5,Dragon:.5,Fire:2,Ground:2,Rock:2},Electric:{Electric:.5,Grass:.5,Dragon:.5,Water:2,Flying:2,Ground:0},Grass:{Fire:.5,Grass:.5,Poison:.5,Flying:.5,Bug:.5,Dragon:.5,Steel:.5,Water:2,Ground:2,Rock:2},Ice:{Fire:.5,Water:.5,Ice:.5,Steel:.5,Grass:2,Ground:2,Flying:2,Dragon:2},Fighting:{Poison:.5,Flying:.5,Psychic:.5,Bug:.5,Fairy:.5,Normal:2,Ice:2,Rock:2,Dark:2,Steel:2,Ghost:0},Poison:{Poison:.5,Ground:.5,Rock:.5,Ghost:.5,Grass:2,Fairy:2,Steel:0},Ground:{Grass:.5,Bug:.5,Fire:2,Electric:2,Poison:2,Rock:2,Steel:2,Flying:0},Flying:{Electric:.5,Rock:.5,Steel:.5,Grass:2,Fighting:2,Bug:2},Psychic:{Psychic:.5,Steel:.5,Fighting:2,Poison:2,Dark:0},Bug:{Fire:.5,Fighting:.5,Poison:.5,Flying:.5,Ghost:.5,Steel:.5,Fairy:.5,Grass:2,Psychic:2,Dark:2},Rock:{Fighting:.5,Ground:.5,Steel:.5,Fire:2,Ice:2,Flying:2,Bug:2},Ghost:{Dark:.5,Psychic:2,Ghost:2,Normal:0},Dragon:{Steel:.5,Dragon:2,Fairy:0},Dark:{Fighting:.5,Dark:.5,Fairy:.5,Psychic:2,Ghost:2},Steel:{Fire:.5,Water:.5,Electric:.5,Steel:.5,Ice:2,Rock:2,Fairy:2},Fairy:{Fire:.5,Poison:.5,Steel:.5,Fighting:2,Dragon:2,Dark:2}},De={Normal:"#A8A77A",Fire:"#EE8130",Water:"#6390F0",Electric:"#F7D02C",Grass:"#7AC74C",Ice:"#96D9D6",Fighting:"#C22E28",Poison:"#A33EA1",Ground:"#E2BF65",Flying:"#A98FF3",Psychic:"#F95587",Bug:"#A6B91A",Rock:"#B6A136",Ghost:"#735797",Dragon:"#6F35FC",Dark:"#705746",Steel:"#B7B7CE",Fairy:"#D685AD"};function Me(r,e){var t,a;return(a=(t=Ee[r])==null?void 0:t[e])!=null?a:1}function U(r){return r?r.charAt(0).toUpperCase()+r.slice(1):""}const he=De;class ce{static applyStatusEffect(e,t,a,s){if(!e.statusEffect)return!1;const n=e.target==="self"?t:a;if(n.status!==null)return s(`${n.name}은(는) 이미 상태이상에 걸려있다!`,!0),!1;const i=e.statusChance||100;return Math.random()*100>i?!1:this.setStatusEffect(n,e.statusEffect,s)}static setStatusEffect(e,t,a){if(e.status!==null)return!1;switch(e.status=t,e.statusTurns=0,t){case"Poisoned":a(`${e.name}이(가) 독에 걸렸다!`,!0);break;case"Paralyzed":a(`${e.name}이(가) 마비되었다!`,!0);break;case"Burned":a(`${e.name}이(가) 화상을 입었다!`,!0);break;case"Frozen":a(`${e.name}이(가) 얼어붙었다!`,!0);break;case"Asleep":a(`${e.name}이(가) 잠들었다!`,!0);break;case"Confused":a(`${e.name}이(가) 혼란에 빠졌다!`,!0);break;case"Taunted":a(`${e.name}이(가) 도발당했다! 변화기술을 사용할 수 없다!`,!0);break}return!0}static cureStatus(e,t){if(e.status===null)return;const a=e.status;switch(e.status=null,e.statusTurns=0,a){case"Poisoned":t(`${e.name}의 독이 치료되었다!`,!0);break;case"Paralyzed":t(`${e.name}의 마비가 치료되었다!`,!0);break;case"Burned":t(`${e.name}의 화상이 치료되었다!`,!0);break;case"Frozen":t(`${e.name}의 얼음이 치료되었다!`,!0);break;case"Asleep":t(`${e.name}이(가) 깨어났다!`,!0);break;case"Confused":t(`${e.name}의 혼란이 치료되었다!`,!0);break;case"Taunted":t(`${e.name}의 도발 효과가 사라졌다!`,!0);break}}static isImmune(e,t){switch(t){case"Burned":return e.type.includes("Fire")||e.englishType.includes("Fire");case"Frozen":return e.type.includes("Ice")||e.englishType.includes("Ice");case"Poisoned":return e.type.includes("Poison")||e.type.includes("Steel")||e.englishType.includes("Poison")||e.englishType.includes("Steel");default:return!1}}}const O={PARALYSIS_CHANCE:.25,STATUS_EFFECT_CHANCE:.3,MAX_STATUS_TURNS:4,POISON_DAMAGE_RATIO:1/8,RANDOM_FACTOR_MIN:85,RANDOM_FACTOR_MAX:100,STAB_MULTIPLIER:1.5,ABILITY_MULTIPLIER:.5,LEVEL:50,MAX_MOVES:4},ue={ATTACK:300,DAMAGE:300,TURN_DELAY:1e3},_={WILD_POKEMON_APPEARED:r=>`야생의 ${r}이(가) 나타났다!`,GO_POKEMON:r=>`가자, ${r}!`,USED_MOVE:(r,e,t)=>`${r}이(가) ${e}을(를) 사용해서 ${t} 데미지를 입혔다!`,POISONED:r=>`${r}이(가) 독에 걸렸다!`,PARALYZED:r=>`${r}이(가) 마비되었다! 움직이지 못할 수도 있다!`,POISON_DAMAGE:(r,e)=>`${r}이(가) 독으로 ${e} 데미지를 받았다!`,NO_LONGER_POISONED:r=>`${r}의 독이 치료되었다!`,NO_LONGER_PARALYZED:r=>`${r}의 마비가 풀렸다!`,PARALYZED_CANT_MOVE:r=>`${r}은(는) 마비로 인해 움직일 수 없다!`,SHOOK_OFF_PARALYSIS:r=>`${r}이(가) 마비를 떨쳐냈다!`,FAINTED:r=>`${r}이(가) 쓰러졌다!`,YOU_WIN:"승리했다!",YOU_LOSE:"패배했다!",SUPER_EFFECTIVE:"효과가 굉장했다!",NOT_VERY_EFFECTIVE:"효과가 별로인 듯하다...",NO_EFFECT:r=>`${r}에게는 효과가 없는 것 같다...`,LEVITATE_AVOID:r=>`${r}이(가) 부유 특성으로 공격을 피했다!`,NO_PP:r=>`${r}의 PP가 부족하다!`,FAINTED_FROM_POISON:r=>`${r}이(가) 독으로 쓰러졌다!`};class de{static canAct(e,t){if(!e.status)return!0;switch(e.status){case"Paralyzed":return this.processParalysis(e,t);case"Frozen":return this.processFrozen(e,t);case"Asleep":return this.processSleep(e,t);case"Confused":return this.processConfusion(e,t);case"Flinched":return this.processFlinch(e,t);case"Taunted":return this.processTaunt(e,t);default:return!0}}static processEndOfTurnEffects(e,t){switch(e.status){case"Poisoned":return this.processPoisonDamage(e,t);case"Burned":return this.processBurnDamage(e,t);default:return!1}}static processParalysis(e,t){return e.status!=="Paralyzed"?!0:(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS?(t(_.NO_LONGER_PARALYZED(e.name),!0),e.status=null,e.statusTurns=0,!0):Math.random()<.25?(t(_.PARALYZED_CANT_MOVE(e.name),!0),!1):!0)}static processPoisonDamage(e,t){if(e.status!=="Poisoned")return!1;if(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS)return t(`${e.name}의 독이 치료되었다!`,!0),e.status=null,e.statusTurns=0,!1;const a=Math.max(1,Math.floor(e.maxHp*.125));return e.hp=Math.max(0,e.hp-a),t(`${e.name}이(가) 독으로 ${a} 데미지를 받았다!`,!0),e.hp===0?(t(`${e.name}이(가) 독으로 쓰러졌다!`,!0),!0):!1}static processBurnDamage(e,t){if(e.status!=="Burned")return!1;if(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS)return t(`${e.name}의 화상이 나았다!`,!0),e.status=null,e.statusTurns=0,!1;const a=Math.max(1,Math.floor(e.maxHp*.0625));return e.hp=Math.max(0,e.hp-a),t(`${e.name}이(가) 화상으로 ${a} 데미지를 받았다!`,!0),e.hp===0?(t(`${e.name}이(가) 화상으로 쓰러졌다!`,!0),!0):!1}static processFrozen(e,t){return e.status!=="Frozen"?!0:(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS||Math.random()<.2?(t(`${e.name}의 얼음이 녹았다!`,!0),e.status=null,e.statusTurns=0,!0):(t(`${e.name}은(는) 얼어서 움직일 수 없다!`,!0),!1))}static processSleep(e,t){return e.status!=="Asleep"?!0:(e.statusTurns++,e.statusTurns>=3||Math.random()<.25?(t(`${e.name}이(가) 깨어났다!`,!0),e.status=null,e.statusTurns=0,!0):(t(`${e.name}은(는) 잠들어 있다!`,!0),!1))}static processConfusion(e,t){if(e.status!=="Confused")return!0;if(e.statusTurns++,e.statusTurns>=4||Math.random()<.25)return t(`${e.name}의 혼란이 풀렸다!`,!0),e.status=null,e.statusTurns=0,!0;if(Math.random()<.5){const a=Math.floor(e.attack*.4);return e.hp=Math.max(0,e.hp-a),t(`${e.name}은(는) 혼란에 빠져 자신을 공격했다! ${a} 데미지!`,!0),e.hp===0&&t(`${e.name}이(가) 혼란으로 쓰러졌다!`,!0),!1}return t(`${e.name}은(는) 혼란스러워하고 있다!`,!0),!0}static processFlinch(e,t){return e.status!=="Flinched"?!0:(t(`${e.name}은(는) 풀죽어서 움직일 수 없었다!`,!0),e.status=null,e.statusTurns=0,!1)}static processTaunt(e,t){return e.status!=="Taunted"||(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS&&(t(`${e.name}의 도발 효과가 사라졌다!`,!0),e.status=null,e.statusTurns=0)),!0}}class V{static getStatusIcon(e){switch(e){case"Poisoned":return"🟣";case"Paralyzed":return"⚡";case"Burned":return"🔥";case"Frozen":return"🧊";case"Asleep":return"💤";case"Confused":return"😵";default:return""}}static getStatusName(e){switch(e){case"Poisoned":return"독";case"Paralyzed":return"마비";case"Burned":return"화상";case"Frozen":return"얼음";case"Asleep":return"수면";case"Confused":return"혼란";default:return""}}static getStatusColor(e){switch(e){case"Poisoned":return"#8B4CB8";case"Paralyzed":return"#F4D03F";case"Burned":return"#E74C3C";case"Frozen":return"#5DADE2";case"Asleep":return"#6C3483";case"Confused":return"#F39C12";default:return"#BDC3C7"}}static getStatusDescription(e){switch(e){case"Poisoned":return"턴마다 최대 HP의 1/8만큼 데미지를 받습니다.";case"Paralyzed":return"25% 확률로 행동할 수 없으며, 스피드가 50% 감소합니다.";case"Burned":return"턴마다 최대 HP의 1/16만큼 데미지를 받고, 공격력이 50% 감소합니다.";case"Frozen":return"행동할 수 없으며, 매 턴 20% 확률로 해제됩니다.";case"Asleep":return"행동할 수 없으며, 매 턴 25% 확률로 깨어납니다.";case"Confused":return"50% 확률로 자신을 공격하며, 매 턴 25% 확률로 해제됩니다.";default:return""}}static getStatusDisplayText(e,t){const a=this.getStatusIcon(e),s=this.getStatusName(e);return`${a} ${s} (${t}턴)`}static getStatusTooltip(e,t){const a=this.getStatusName(e),s=this.getStatusDescription(e);return`${a} (${t}턴째)
${s}`}static getAllStatusEffects(){return["Poisoned","Paralyzed","Burned","Frozen","Asleep","Confused"].map(t=>({value:t,label:this.getStatusName(t),icon:this.getStatusIcon(t),color:this.getStatusColor(t)}))}}class K{static applyStatusEffect(e,t,a,s){return ce.applyStatusEffect(e,t,a,s)}static setStatusEffect(e,t,a){return ce.setStatusEffect(e,t,a)}static cureStatus(e,t){ce.cureStatus(e,t)}static isImmune(e,t){return ce.isImmune(e,t)}static canAct(e,t){return de.canAct(e,t)}static processEndOfTurnEffects(e,t){return de.processEndOfTurnEffects(e,t)}static getStatusIcon(e){return V.getStatusIcon(e)}static getStatusName(e){return V.getStatusName(e)}static getStatusColor(e){return V.getStatusColor(e)}static getStatusDescription(e){return V.getStatusDescription(e)}static getStatusDisplayText(e,t){return V.getStatusDisplayText(e,t)}static getStatusTooltip(e,t){return V.getStatusTooltip(e,t)}static getAllStatusEffects(){return V.getAllStatusEffects()}}class F{static getStatMultiplier(e){return e>=0?(2+e)/2:2/(2+Math.abs(e))}static applyStatChanges(e,t,a){for(const s of t)this.applyStatChange(e,s,a)}static applyStatChange(e,t,a){const s=e.statStages[t.stat],n=Math.max(this.STAT_STAGE_MIN,Math.min(this.STAT_STAGE_MAX,s+t.stages));if(n===s){t.stages>0?a(`${e.name}의 ${this.getStatName(t.stat)}는 더 이상 올라가지 않는다!`,!0):a(`${e.name}의 ${this.getStatName(t.stat)}는 더 이상 내려가지 않는다!`,!0);return}e.statStages[t.stat]=n;const i=this.getStatName(t.stat),o=t.stages>0,l=this.STAGE_INTENSITY_MAP[Math.abs(t.stages)]||"";a(o?`${e.name}의 ${i}가 ${l}올라갔다!`:`${e.name}의 ${i}가 ${l}내려갔다!`,!0)}static getStatName(e){return this.STAT_NAMES[e]}static getEffectiveStat(e,t){const a=this.getBaseStat(e,t),s=this.getStatMultiplier(e.statStages[t]);return Math.floor(a*s)}static getBaseStat(e,t){switch(t){case"attack":return e.attack;case"defense":return e.defense;case"special-attack":return e.specialAttack;case"special-defense":return e.specialDefense;default:return this.DEFAULT_BASE_STAT_VALUE}}static resetStatStages(e){const t={attack:0,defense:0,"special-attack":0,"special-defense":0,speed:0,accuracy:0,evasion:0};e.statStages=t}}I(F,"STAT_STAGE_MIN",-6),I(F,"STAT_STAGE_MAX",6),I(F,"DEFAULT_BASE_STAT_VALUE",100),I(F,"STAT_NAMES",{attack:"공격력",defense:"방어력","special-attack":"특수공격","special-defense":"특수방어",speed:"스피드",accuracy:"명중률",evasion:"회피율"}),I(F,"STAGE_INTENSITY_MAP",{1:"",2:"크게 ",3:"대폭 "});const Ne={class:"pokemon-name"},Be={class:"abilities"},Re={class:"hp-bar"},Ie={class:"hp-status-container"},He={class:"hp-text"},xe={key:0,class:"stat-changes-container"},Ge={class:"stat-changes-grid"},Ue=["src","alt"],Le={class:"types"},We={key:1,class:"stats-overlay"},Ve={class:"hp-display"},Ye={class:"stats-grid"},Ke={class:"stat-line"},Xe={class:"stat-value"},qe={class:"stat-line"},Qe={class:"stat-value"},Ze={class:"stat-line"},Je={class:"stat-value"},et={class:"stat-line"},tt={class:"stat-value"},at={class:"stat-line"},st={class:"stat-value"},nt={class:"stat-line"},rt={class:"stat-value"},it={class:"stat-line"},ot={class:"stat-value"},lt={class:"pokemon-info"},ct={class:"types-display"},ut={class:"abilities-display"},ft={key:0,class:"description-display"},pt=ne({__name:"PokemonCard",props:{pokemon:{},isAttacking:{type:Boolean},isTakingDamage:{type:Boolean},isOpponent:{type:Boolean},showOverlay:{type:Boolean}},emits:["overlay-toggle"],setup(r,{emit:e}){const t=r,a=e,s=$(!1),n=j(()=>t.showOverlay!==void 0?t.showOverlay:s.value),i=()=>{t.showOverlay!==void 0?a("overlay-toggle",!0):s.value=!0},o=()=>{t.showOverlay!==void 0?a("overlay-toggle",!1):s.value=!1},l=c=>{const k=U(t.pokemon.englishType[c]);return he[k]||"#A8A77A"},f=j(()=>{const c=t.pokemon.hp/t.pokemon.maxHp*100;return c>50?"#4CAF50":c>20?"#FFC107":"#F44336"}),y=j(()=>({boxShadow:`0 0 15px 5px ${t.isOpponent?"#dc3545":"#007bff"}, 0 0 10px 2px rgba(0,0,0,0.2)`})),S=(c,k)=>{const b=Math.max(0,4-k);switch(c){case"Poisoned":return`독 (${b}턴)`;case"Paralyzed":return`마비 (${b}턴)`;case"Burned":return`화상 (${b}턴)`;case"Frozen":return`얼음 (${b}턴)`;case"Asleep":return`수면 (${Math.max(0,3-k)}턴)`;case"Confused":return`혼란 (${Math.max(0,4-k)}턴)`;default:return c}},p=c=>t.pokemon.statStages[c]||0,h=c=>c===0?"":`${c>0?"+":""}${c}`,T=c=>c>0?"#4CAF50":c<0?"#F44336":"#ffffff",P=()=>{const c=p("accuracy");return c===0?100:c>0?Math.round(100*(3+c)/3):Math.round(100*3/(3+Math.abs(c)))},D=()=>{const c=p("evasion");return c===0?100:c>0?Math.round(100*(3+c)/3):Math.round(100*3/(3+Math.abs(c)))},B=j(()=>Object.values(t.pokemon.statStages).some(c=>c!==0));return(c,k)=>(m(),v("div",{class:se(["pokemon-card",{"is-attacking":c.isAttacking,"is-taking-damage":c.isTakingDamage,"is-opponent":c.isOpponent}]),style:A(y.value),onMouseenter:i,onMouseleave:o},[u("h3",Ne,"Lv."+d(c.pokemon.level)+" "+d(c.pokemon.name),1),u("div",Be,[(m(!0),v(ae,null,oe(c.pokemon.abilities,b=>(m(),v("span",{key:b,class:"ability-tag"},d(b),1))),128))]),u("div",Re,[u("div",{class:"hp-bar-inner",style:A({width:c.pokemon.hp/c.pokemon.maxHp*100+"%",backgroundColor:f.value})},null,4)]),u("div",Ie,[c.pokemon.status?(m(),v("div",{key:0,class:se(["status-indicator",c.pokemon.status.toLowerCase()])},d(g(K).getStatusIcon(c.pokemon.status))+" "+d(S(c.pokemon.status,c.pokemon.statusTurns)),3)):w("",!0),u("p",He,"HP: "+d(c.pokemon.hp)+" / "+d(c.pokemon.maxHp),1)]),B.value?(m(),v("div",xe,[k[0]||(k[0]=u("div",{class:"stat-changes-title"},"능력치 변화:",-1)),u("div",Ge,[(m(!0),v(ae,null,oe(c.pokemon.statStages,(b,R)=>(m(),v(ae,{key:R},[b!==0?(m(),v("div",{key:0,class:"stat-change-item",style:A({color:T(b)})},d(g(F).getStatName(R))+" "+d(h(b)),5)):w("",!0)],64))),128))])])):w("",!0),u("img",{src:c.pokemon.sprite,alt:c.pokemon.name,class:"pokemon-sprite"},null,8,Ue),u("div",Le,[(m(!0),v(ae,null,oe(c.pokemon.type,(b,R)=>(m(),v("span",{key:b,class:"type-tag",style:A({backgroundColor:l(R)})},d(b),5))),128))]),n.value?(m(),v("div",We,[u("h4",null,"Lv."+d(c.pokemon.level)+" "+d(c.pokemon.name),1),u("p",Ve,"HP: "+d(c.pokemon.hp)+" / "+d(c.pokemon.maxHp),1),u("div",Ye,[u("div",Ke,[k[1]||(k[1]=u("span",{class:"stat-label"},"공격력",-1)),u("span",Xe,[u("b",{style:A({color:T(p("attack"))})},d(c.pokemon.attack),5),p("attack")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("attack"))})}," ("+d(h(p("attack")))+") ",5)):w("",!0)])]),u("div",qe,[k[2]||(k[2]=u("span",{class:"stat-label"},"방어력",-1)),u("span",Qe,[u("b",{style:A({color:T(p("defense"))})},d(c.pokemon.defense),5),p("defense")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("defense"))})}," ("+d(h(p("defense")))+") ",5)):w("",!0)])]),u("div",Ze,[k[3]||(k[3]=u("span",{class:"stat-label"},"특공",-1)),u("span",Je,[u("b",{style:A({color:T(p("special-attack"))})},d(c.pokemon.specialAttack),5),p("special-attack")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("special-attack"))})}," ("+d(h(p("special-attack")))+") ",5)):w("",!0)])]),u("div",et,[k[4]||(k[4]=u("span",{class:"stat-label"},"특방",-1)),u("span",tt,[u("b",{style:A({color:T(p("special-defense"))})},d(c.pokemon.specialDefense),5),p("special-defense")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("special-defense"))})}," ("+d(h(p("special-defense")))+") ",5)):w("",!0)])]),u("div",at,[k[5]||(k[5]=u("span",{class:"stat-label"},"스피드",-1)),u("span",st,[u("b",{style:A({color:T(p("speed"))})},d(c.pokemon.speed||"???"),5),p("speed")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("speed"))})}," ("+d(h(p("speed")))+") ",5)):w("",!0)])]),u("div",nt,[k[6]||(k[6]=u("span",{class:"stat-label"},"명중률",-1)),u("span",rt,[u("b",{style:A({color:T(p("accuracy"))})},d(P())+"%",5),p("accuracy")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("accuracy"))})}," ("+d(h(p("accuracy")))+") ",5)):w("",!0)])]),u("div",it,[k[7]||(k[7]=u("span",{class:"stat-label"},"회피율",-1)),u("span",ot,[u("b",{style:A({color:T(p("evasion"))})},d(D())+"%",5),p("evasion")!==0?(m(),v("span",{key:0,class:"stat-change-mini",style:A({color:T(p("evasion"))})}," ("+d(h(p("evasion")))+") ",5)):w("",!0)])])]),u("div",lt,[u("p",ct,d(c.pokemon.type.join(" / ")),1),u("p",ut,d(c.pokemon.abilities.join(", ")),1),c.pokemon.description?(m(),v("p",ft,d(c.pokemon.description),1)):w("",!0)])])):w("",!0)],38))}});const ht=(r,e)=>{const t=r.__vccOpts||r;for(const[a,s]of e)t[a]=s;return t},ge=ht(pt,[["__scopeId","data-v-3916aa44"]]),dt=["disabled"],gt={class:"move-name-container"},yt={class:"move-name"},mt={class:"move-details"},St=ne({__name:"MoveButton",props:{move:{},opponentTypes:{},disabled:{type:Boolean}},emits:["mouseover-move","mouseleave-move","right-click-move"],setup(r,{emit:e}){const t=r,a=e,s=j(()=>{let l=1;return t.opponentTypes.forEach(f=>{l*=Me(U(t.move.englishType),U(f))}),l}),n=j(()=>s.value===0?"x0":s.value===.25?"x¼":s.value===.5?"x½":s.value===1?"":`x${s.value}`),i=j(()=>s.value>1?"super-effective":s.value<1&&s.value>0?"not-very-effective":s.value===0?"no-effect":""),o=j(()=>({backgroundColor:he[U(t.move.englishType)]||"#A8A77A"}));return(l,f)=>(m(),v("button",{class:"move-button",style:A(o.value),disabled:l.disabled||l.move.pp<=0,onMouseover:f[0]||(f[0]=y=>a("mouseover-move",l.move)),onMouseleave:f[1]||(f[1]=y=>a("mouseleave-move")),onContextmenu:f[2]||(f[2]=Pe(y=>a("right-click-move",l.move),["prevent"]))},[u("div",gt,[u("span",yt,d(l.move.name),1),n.value?(m(),v("span",{key:0,class:se(["effectiveness-badge",i.value])},d(n.value),3)):w("",!0)]),u("div",mt,[u("span",null,d(l.move.type),1),u("span",null,"PWR: "+d(l.move.power),1)])],44,dt))}}),vt={class:"battle-log"},Tt=ne({__name:"BattleLog",props:{logs:{}},setup(r){return(e,t)=>(m(),v("div",vt,[(m(!0),v(ae,null,oe(e.logs,(a,s)=>(m(),v("p",{key:s,class:se({"player-turn":a.isPlayerTurn,"opponent-turn":!a.isPlayerTurn})},d(a.message),3))),128))]))}}),kt={class:"arrow"},Et={class:"effectiveness-text"},ye=ne({__name:"TypeEffectivenessIndicator",props:{attackerTypes:{},defenderTypes:{},displayAttackerTypes:{},displayDefenderTypes:{}},setup(r){const e=r,t=j(()=>{let i=1;return e.attackerTypes.forEach(o=>{e.defenderTypes.forEach(l=>{i*=Me(U(o),U(l))})}),i}),a=j(()=>t.value>1?"→":t.value<1&&t.value>0?"⇀":t.value===0?"⨯":"→"),s=j(()=>t.value===0?"x0":t.value===.25?"x1/4":t.value===.5?"x1/2":t.value===1?"x1":`x${t.value}`),n=j(()=>t.value>1?"super-effective":t.value<1&&t.value>0?"not-very-effective":t.value===0?"no-effect":"normal-effectiveness");return(i,o)=>(m(),v("div",{class:se(["type-effectiveness-indicator",n.value])},[u("span",null,d(i.displayAttackerTypes.join("/")),1),u("span",kt,d(a.value),1),u("span",null,d(i.displayDefenderTypes.join("/")),1),u("span",Et,"("+d(s.value)+")",1)],2))}});class G{static logError(e,t){const a={message:`${t?`[${t}] `:""}${e.message}`,timestamp:Date.now()};console.error("Application Error:",a)}}class Mt{constructor(){I(this,"api");I(this,"typeCache",new Map);this.api=new ke}getLocalizedEntry(e,t){const a=e.find(s=>s.language.name==="ko");return a?a[t]:void 0}mapPokeApiTypeToPokemonType(e){return z(this,null,function*(){if(this.typeCache.has(e))return this.typeCache.get(e);try{const t=yield this.api.pokemon.getTypeByName(e),s=[this.getLocalizedEntry(t.names,"name")||e,e];return this.typeCache.set(e,s),s}catch(t){G.logError(t,`Failed to fetch type data for ${e}`);const a=[e,e];return this.typeCache.set(e,a),a}})}mapDamageClass(e){switch(e){case"physical":return"Physical";case"special":return"Special";case"status":return"Status";default:return}}}class Y{static calculateStat(e,t=!1){const a=O.LEVEL;return t?Math.floor(.01*(2*e)*a)+a+10:Math.floor(.01*(2*e)*a)+5}static calculateBaseStats(e){return{hp:this.calculateStat(e.hp,!0),attack:this.calculateStat(e.attack),defense:this.calculateStat(e.defense),specialAttack:this.calculateStat(e["special-attack"]),specialDefense:this.calculateStat(e["special-defense"]),speed:this.calculateStat(e.speed)}}static initializeStatStages(){return{attack:0,defense:0,"special-attack":0,"special-defense":0,speed:0,accuracy:0,evasion:0}}}class ie{static extractStatusEffect(e){var t,a,s,n,i,o,l,f,y;try{if((a=(t=e.meta)==null?void 0:t.ailment)!=null&&a.name&&e.meta.ailment.name!=="none"){const S=e.meta.ailment.name,p={paralysis:"Paralyzed",sleep:"Asleep",freeze:"Frozen",burn:"Burned",poison:"Poisoned",confusion:"Confused",yawn:"Asleep",infatuation:"Confused"};if(p[S])return p[S]}if(((n=(s=e.meta)==null?void 0:s.category)==null?void 0:n.name)==="unique"){if(e.meta.category.name==="unique"&&e.meta.ailment.name==="none"&&((i=e.target)==null?void 0:i.name)==="selected-pokemon"&&((o=e.damage_class)==null?void 0:o.name)==="status"&&e.power===null&&((l=e.effect_entries)==null?void 0:l.some(T=>{var P,D;return((P=T.language)==null?void 0:P.name)==="en"&&((D=T.effect)==null?void 0:D.toLowerCase().includes("forced to only use damaging moves"))})))return"Taunted";const p=e.name.toLowerCase();if(p.includes("taunt"))return"Taunted";const h={disable:"Confused",encore:"Confused",yawn:"Asleep"};for(const[T,P]of Object.entries(h))if(p.includes(T))return P}if(((y=(f=e.meta)==null?void 0:f.category)==null?void 0:y.name)==="ailment"){const S=e.name.toLowerCase(),p={"sleep-powder":"Asleep",spore:"Asleep",hypnosis:"Asleep","lovely-kiss":"Asleep",sing:"Asleep","grass-whistle":"Asleep","thunder-wave":"Paralyzed","stun-spore":"Paralyzed",glare:"Paralyzed","will-o-wisp":"Burned","poison-powder":"Poisoned",toxic:"Poisoned","poison-gas":"Poisoned","confuse-ray":"Confused",supersonic:"Confused","sweet-kiss":"Confused"};for(const[h,T]of Object.entries(p))if(S.includes(h))return T}return null}catch(S){return console.error("[MoveDataExtractor] Error extracting status effect:",S),null}}static extractStatusChance(e){return e.effect_chance||void 0}static extractTarget(e){var n;const t=((n=e.target)==null?void 0:n.name)||"";return["user","users-field","ally","all-allies"].includes(t)?"self":(["selected-pokemon","random-opponent","all-opponents","all-other-pokemon","opponents-field","entire-field"].includes(t),"opponent")}static mapApiStatToGameStat(e){return{attack:"attack",defense:"defense","special-attack":"special-attack","special-defense":"special-defense",speed:"speed",accuracy:"accuracy",evasion:"evasion"}[e]||null}static extractAllStatChanges(e){var s,n,i;const t=[],a=[];if(e.stat_changes&&e.stat_changes.length>0)for(const o of e.stat_changes){const l=this.mapApiStatToGameStat(o.stat.name);if(l){const f=((s=e.target)==null?void 0:s.name)||"",y=["selected-pokemon","random-opponent","all-opponents","all-other-pokemon","opponents-field","entire-field"].includes(f),S=["user","users-field","ally","all-allies"].includes(f);((i=(n=e.meta)==null?void 0:n.category)==null?void 0:i.name)==="damage+raise"?a.push({stat:l,stages:o.change}):y?t.push({stat:l,stages:o.change}):S?a.push({stat:l,stages:o.change}):o.change>0?a.push({stat:l,stages:o.change}):o.change<0&&t.push({stat:l,stages:o.change})}}return(!e.stat_changes||e.stat_changes.length===0)&&this.applyKnownMoveStatChanges(e.name.toLowerCase(),t,a),{statChanges:t,selfStatChanges:a}}static applyKnownMoveStatChanges(e,t,a){const s={"swords-dance":[{stat:"attack",stages:2}],"nasty-plot":[{stat:"special-attack",stages:2}],"dragon-dance":[{stat:"attack",stages:1},{stat:"speed",stages:1}],"calm-mind":[{stat:"special-attack",stages:1},{stat:"special-defense",stages:1}],"bulk-up":[{stat:"attack",stages:1},{stat:"defense",stages:1}],harden:[{stat:"defense",stages:1}],withdraw:[{stat:"defense",stages:1}],"acid-armor":[{stat:"defense",stages:2}],barrier:[{stat:"special-defense",stages:2}],amnesia:[{stat:"special-defense",stages:2}],agility:[{stat:"speed",stages:2}],"double-team":[{stat:"evasion",stages:1}],minimize:[{stat:"evasion",stages:2}],"focus-energy":[{stat:"accuracy",stages:1}]},n={growl:[{stat:"attack",stages:-1}],leer:[{stat:"defense",stages:-1}],"tail-whip":[{stat:"defense",stages:-1}],screech:[{stat:"defense",stages:-2}],"string-shot":[{stat:"speed",stages:-1}],"sand-attack":[{stat:"accuracy",stages:-1}],smokescreen:[{stat:"accuracy",stages:-1}],flash:[{stat:"accuracy",stages:-1}],"sweet-scent":[{stat:"evasion",stages:-2}],"scary-face":[{stat:"speed",stages:-2}],charm:[{stat:"attack",stages:-2}],"feather-dance":[{stat:"attack",stages:-2}]};s[e]&&a.push(...s[e]),n[e]&&t.push(...n[e])}static extractSpecialEffects(e){const t=[],a=e.name.toLowerCase();if(e.meta){if(e.meta.drain<0){const n=Math.abs(e.meta.drain)/100;t.push({type:"recoil",value:n})}if(e.meta.drain>0){const n=e.meta.drain/100;t.push({type:"drain",value:n})}if(e.meta.healing>0){const n=e.meta.healing/100;t.push({type:"heal",value:n})}if(e.meta.min_hits&&e.meta.max_hits){const n=e.meta.min_hits,i=e.meta.max_hits,o=Math.floor(Math.random()*(i-n+1))+n;t.push({type:"multiHit",value:o})}if(e.meta.flinch_chance>0){const n=e.meta.flinch_chance/100;t.push({type:"flinch",chance:n})}e.meta.crit_rate>0&&t.push({type:"critRateUp"})}e.priority>0&&t.push({type:"priority",value:e.priority});const s=this.getKnownMoveEffects(a,e.meta);return s.length>0&&t.push(...s),t}static getKnownMoveEffects(e,t){const a=[],s={"double-edge":.33,submission:.25,"take-down":.25,"wild-charge":.25,"volt-tackle":.33,"flare-blitz":.33,"brave-bird":.33,"wood-hammer":.33,"head-smash":.5};s[e]&&(!t||t.drain>=0)&&a.push({type:"recoil",value:s[e]});const n={absorb:.5,"mega-drain":.5,"giga-drain":.5,"leech-life":.5,"drain-punch":.5,"leech-seed":.125};n[e]&&(!t||t.drain<=0)&&a.push({type:"drain",value:n[e]});const i={recover:.5,rest:1,roost:.5,synthesis:.5,moonlight:.5,"morning-sun":.5,"soft-boiled":.5,"milk-drink":.5};if(i[e]&&(!t||t.healing<=0)&&a.push({type:"heal",value:i[e]}),!((t==null?void 0:t.min_hits)&&(t==null?void 0:t.max_hits))){if(["fury-attack","pin-missile","spike-cannon","barrage","bone-rush"].includes(e)){const y=Math.floor(Math.random()*4)+2;a.push({type:"multiHit",value:y})}if(["double-slap","comet-punch","fury-swipes"].includes(e)){const y=Math.floor(Math.random()*3)+2;a.push({type:"multiHit",value:y})}["double-kick","twineedle"].includes(e)&&a.push({type:"multiHit",value:2})}return!((t==null?void 0:t.crit_rate)>0)&&["slash","razor-leaf","karate-chop","crabhammer","shadow-claw","night-slash","psycho-cut"].includes(e)&&a.push({type:"critRateUp"}),(t==null?void 0:t.flinch_chance)>0||["bite","headbutt","stomp","rolling-kick","low-kick","bone-club","rock-slide","waterfall","astonish","fake-out","air-slash","force-palm","zen-headbutt","iron-head","heart-stamp","sky-attack"].includes(e)&&a.push({type:"flinch",chance:.3}),a}}class bt{constructor(){I(this,"api");I(this,"cachedAxios");I(this,"typeMappingService");this.api=new ke,this.typeMappingService=new Mt,this.cachedAxios=Oe(je,{ttl:1e3*60*15})}processPokemonMoves(e){return z(this,null,function*(){try{const a=e.sort(()=>.5-Math.random()).slice(0,O.MAX_MOVES);return yield Promise.all(a.map(n=>z(this,null,function*(){var i;try{const o=yield this.api.move.getMoveByName(n.move.name),l=this.typeMappingService.getLocalizedEntry(o.flavor_text_entries,"flavor_text"),[f,y]=yield this.typeMappingService.mapPokeApiTypeToPokemonType(o.type.name),S=o.pp||1,p=ie.extractStatusEffect(o),h=ie.extractStatusChance(o),T=ie.extractTarget(o),{statChanges:P,selfStatChanges:D}=ie.extractAllStatChanges(o),B=ie.extractSpecialEffects(o);return{name:this.typeMappingService.getLocalizedEntry(o.names,"name")||n.move.name,power:o.power||0,type:f,englishType:y,flavorText:l,pp:S,maxPp:S,accuracy:o.accuracy||100,category:this.typeMappingService.mapDamageClass((i=o.damage_class)==null?void 0:i.name),statusEffect:p,statusChance:h,target:T,statChanges:P,selfStatChanges:D,specialEffects:B,priority:o.priority||0}}catch(o){return G.logError(o,`Failed to process move: ${n.move.name}`),{name:n.move.name,power:40,type:"Normal",englishType:"Normal",flavorText:"No description available.",pp:10,maxPp:10,accuracy:100,category:"Physical",statusEffect:null,statusChance:void 0,statChanges:[],selfStatChanges:[],specialEffects:[],priority:0}}})))}catch(t){return G.logError(t,"Failed to process Pokemon moves"),[]}})}fetchPokemonData(e,t=!1){return z(this,null,function*(){var a,s,n,i,o,l,f,y,S,p;try{const h=yield this.api.pokemon.getPokemonByName(e),T=yield this.api.pokemon.getPokemonSpeciesByName(e),P=this.typeMappingService.getLocalizedEntry(T.names,"name")||h.name,D=this.typeMappingService.getLocalizedEntry(T.flavor_text_entries,"flavor_text"),B=h.stats.find(C=>C.stat.name==="hp"),c=h.stats.find(C=>C.stat.name==="attack"),k=h.stats.find(C=>C.stat.name==="defense"),b=h.stats.find(C=>C.stat.name==="special-attack"),R=h.stats.find(C=>C.stat.name==="special-defense"),q=h.stats.find(C=>C.stat.name==="speed"),L=[],W=[];yield Promise.all(h.types.map(C=>z(this,null,function*(){const[re,Ae]=yield this.typeMappingService.mapPokeApiTypeToPokemonType(C.type.name);L.push(re),W.push(Ae)})));const Q=yield this.processPokemonMoves(h.moves),Z=t?((s=(a=h.sprites.other)==null?void 0:a.showdown)==null?void 0:s.back_default)||((o=(i=(n=h.sprites.versions["generation-v"])==null?void 0:n["black-white"])==null?void 0:i.animated)==null?void 0:o.back_default)||h.sprites.back_default||h.sprites.front_default||"":((f=(l=h.sprites.other)==null?void 0:l.showdown)==null?void 0:f.front_default)||((p=(S=(y=h.sprites.versions["generation-v"])==null?void 0:y["black-white"])==null?void 0:S.animated)==null?void 0:p.front_default)||h.sprites.front_default||"",H=yield Promise.all(h.abilities.map(C=>z(this,null,function*(){try{const re=yield this.api.pokemon.getAbilityByName(C.ability.name);return this.typeMappingService.getLocalizedEntry(re.names,"name")||C.ability.name}catch(re){return G.logError(re,`Failed to fetch ability: ${C.ability.name}`),C.ability.name}}))),E=B?Y.calculateStat(B.base_stat,!0):100,M=c?Y.calculateStat(c.base_stat):50,N=k?Y.calculateStat(k.base_stat):50,x=b?Y.calculateStat(b.base_stat):50,le=R?Y.calculateStat(R.base_stat):50,_e=q?Y.calculateStat(q.base_stat):50;return{name:P,hp:E,maxHp:E,attack:M,defense:N,specialAttack:x,specialDefense:le,speed:_e,moves:Q,allMoves:h.moves,sprite:Z,type:L,englishType:W,abilities:H,level:O.LEVEL,description:D,status:null,statusTurns:0,statStages:Y.initializeStatStages()}}catch(h){return G.logError(h,`Failed to fetch Pokémon data: ${e}`),null}})}}const fe=new bt;class me{static processSpecialEffects(e,t,a,s,n){let i=0,o=0;const l=[];if(!e.specialEffects)return{recoilDamage:i,drainHeal:o,additionalEffects:l};for(const f of e.specialEffects)switch(f.type){case"recoil":i+=this.processRecoilEffect(f,t,s,l);break;case"drain":o+=this.processDrainEffect(f,t,s,l);break;case"heal":this.processHealEffect(f,t,l);break;case"flinch":this.processFlinchEffect(f,a,l);break;case"multiHit":this.processMultiHitEffect(f,l);break}return{recoilDamage:i,drainHeal:o,additionalEffects:l}}static processRecoilEffect(e,t,a,s){const n=Math.floor(a*(e.value||.25));return t.hp=Math.max(0,t.hp-n),s.push(`${t.name}는 반동으로 ${n}의 데미지를 받았다!`),n}static processDrainEffect(e,t,a,s){const n=Math.floor(a*(e.value||.5)),i=Math.min(n,t.maxHp-t.hp);return t.hp+=i,s.push(`${t.name}가 ${i}만큼 체력을 흡수했다!`),i}static processHealEffect(e,t,a){const s=Math.floor(t.maxHp*(e.value||.5)),n=Math.min(s,t.maxHp-t.hp);t.hp+=n,a.push(`${t.name}가 ${n}만큼 체력을 회복했다!`)}static processFlinchEffect(e,t,a){const s=e.chance||.3;Math.random()<s&&t.status===null&&(t.status="Flinched",t.statusTurns=0,a.push(`${t.name}가 풀죽었다!`))}static processMultiHitEffect(e,t){const a=e.value||2;t.push(`${a}번 연속 공격!`)}}class Se{static getStatStagesDisplay(e){return Object.entries(e.statStages).filter(([t,a])=>a!==0).map(([t,a])=>this.formatStatStageDisplay(t,a))}static formatStatStageDisplay(e,t){const a=this.getStatName(e),s=t>0?"+":"";return`${a}: ${s}${t}`}static getStatName(e){return F.getStatName(e)}static getDetailedStatInfo(e){const t={};return Object.entries(e.statStages).forEach(([a,s])=>{const n=a,i=this.getStatName(n),o=this.getStatMultiplier(s),l=Math.round(o*100);t[i]=`${l}% (${s>=0?"+":""}${s})`}),t}static getStatMultiplier(e){return e>=0?(2+e)/2:2/(2+Math.abs(e))}}class X{static applyMoveEffects(e,t,a,s,n){return e.statChanges&&e.statChanges.length>0&&F.applyStatChanges(a,e.statChanges,n),e.selfStatChanges&&e.selfStatChanges.length>0&&F.applyStatChanges(t,e.selfStatChanges,n),me.processSpecialEffects(e,t,a,s,n)}static getStatMultiplier(e){return F.getStatMultiplier(e)}static applyStatChanges(e,t,a){F.applyStatChanges(e,t,a)}static processSpecialEffects(e,t,a,s,n){return me.processSpecialEffects(e,t,a,s,n)}static getEffectiveStat(e,t){return F.getEffectiveStat(e,t)}static resetStatStages(e){F.resetStatStages(e)}static getStatStagesDisplay(e){return Se.getStatStagesDisplay(e)}static getDetailedStatInfo(e){return Se.getDetailedStatInfo(e)}}class J{static getTypeEffectiveness(e,t){var a,s;return(s=(a=Ee[e])==null?void 0:a[t])!=null?s:1}static getMultiTypeEffectiveness(e,t){let a=1;return t.forEach(s=>{a*=this.getTypeEffectiveness(e,s)}),a}static logEffectiveness(e,t,a){e>1?a(_.SUPER_EFFECTIVE,!0):e===0?a(_.NO_EFFECT(t),!0):e<1&&a(_.NOT_VERY_EFFECTIVE,!0)}static getEffectivenessDescription(e){return e>1?"효과가 굉장했다!":e===0?"효과가 없다...":e<1?"효과가 별로인 듯하다...":""}static getEffectivenessColor(e){return e>1?"#E74C3C":e===0?"#7F8C8D":e<1?"#3498DB":"#2ECC71"}static capitalizeFirstLetter(e){return e?e.charAt(0).toUpperCase()+e.slice(1):""}}class ee{static calculateBaseDamage(e,t,a,s,n){const i=e.level*2/5+2,o=s/n;return Math.floor(i*a.power*o/50)+2}static applyCriticalHit(e,t,a){var o;const n=((o=t.specialEffects)==null?void 0:o.find(l=>l.type==="critRateUp"))?.125:.0625;return Math.random()<n?(a("급소에 맞았다!",!0),Math.floor(e*1.5)):e}static applySTAB(e,t,a){const s=a.charAt(0).toUpperCase()+a.slice(1);return t.englishType.includes(s)?Math.floor(e*O.STAB_MULTIPLIER):e}static applyRandomFactor(e){const t=(Math.floor(Math.random()*(O.RANDOM_FACTOR_MAX-O.RANDOM_FACTOR_MIN+1))+O.RANDOM_FACTOR_MIN)/100;return Math.floor(e*t)}static applyMultiHit(e,t,a){var i;const s=(i=t.specialEffects)==null?void 0:i.find(o=>o.type==="multiHit"),n=(s==null?void 0:s.value)||1;return n>1?(a(`${n}회 연속 공격!`,!0),e*n):e}static ensureMinimumDamage(e){return Math.max(1,e)}}class ve{static applyAbilityEffects(e,t,a,s,n,i){let o=e;return a.abilities.includes("levitate")&&n==="Ground"?(i(_.LEVITATE_AVOID(a.name),!1),0):(a.abilities.includes("thick-fat")&&(n==="Fire"||n==="Ice")&&(o=Math.floor(o*O.ABILITY_MULTIPLIER)),o)}static applyStatusEffects(e,t,a){let s=e;return t.status==="Burned"&&a.category==="Physical"&&(s=Math.floor(s*.5)),s}static applyWeatherEffects(e,t,a){let s=e;switch(a){case"sunny":t==="Fire"?s=Math.floor(s*1.5):t==="Water"&&(s=Math.floor(s*.5));break;case"rain":t==="Water"?s=Math.floor(s*1.5):t==="Fire"&&(s=Math.floor(s*.5));break}return s}static applyTerrainEffects(e,t,a){let s=e;switch(a){case"electric":t==="Electric"&&(s=Math.floor(s*1.3));break;case"grassy":t==="Grass"&&(s=Math.floor(s*1.3));break;case"psychic":t==="Psychic"&&(s=Math.floor(s*1.3));break;case"misty":t==="Dragon"&&(s=Math.floor(s*.5));break}return s}}class Te{static getTypeEffectiveness(e,t){return J.getTypeEffectiveness(e,t)}static capitalizeFirstLetter(e){return J.capitalizeFirstLetter(e)}static calculateDamage(e,t,a,s){const n=this.capitalizeFirstLetter(a.englishType),i=X.getEffectiveStat(e,"attack"),o=X.getEffectiveStat(t,"defense");let l=ee.calculateBaseDamage(e,t,a,i,o);l=ve.applyStatusEffects(l,e,a),l=ee.applyCriticalHit(l,a,s),l=ee.applySTAB(l,e,a.englishType);const f=t.englishType.map(S=>this.capitalizeFirstLetter(S)),y=J.getMultiTypeEffectiveness(n,f);return l=Math.floor(l*y),l=ve.applyAbilityEffects(l,e,t,a,n,s),l===0?(J.logEffectiveness(0,t.name,s),0):(l=ee.applyRandomFactor(l),l=ee.applyMultiHit(l,a,s),J.logEffectiveness(y,t.name,s),ee.ensureMinimumDamage(l))}static logEffectiveness(e,t,a){J.logEffectiveness(e,t,a)}}class _t{static executeTurn(e,t,a,s,n){return z(this,null,function*(){const i=this.selectOpponentMove(a),o=e.priority||0,l=i.priority||0;let f;if(o>l)f="player";else if(l>o)f="opponent";else{const p=X.getEffectiveStat(t,"speed"),h=X.getEffectiveStat(a,"speed");p>=h?f="player":f="opponent"}let y;if(f==="player"?y=yield this.executePlayerTurn(e,t,a,s,n):y=yield this.executeOpponentTurn(t,a,s,n,i),y.battleEnded)return{playerTurnResult:y};let S;return f==="player"?S=yield this.executeOpponentTurn(t,a,s,n,i):S=yield this.executePlayerTurn(e,t,a,s,n),f==="player"?{playerTurnResult:y,opponentTurnResult:S}:{playerTurnResult:S,opponentTurnResult:y}})}static executePlayerTurn(e,t,a,s,n){return z(this,null,function*(){if(e.pp<=0)return s(_.NO_PP(e.name),!0),{damage:0,battleEnded:!1};if(!K.canAct(t,s))return K.processEndOfTurnEffects(t,s)?(s(`${_.FAINTED(t.name)} ${_.YOU_LOSE}`,!0),{damage:0,battleEnded:!0,winnerIsPlayer:!1}):{damage:0,battleEnded:!1};if(t.status==="Taunted"&&e.category==="Status")return s(`${t.name}은(는) 도발에 걸려 상태 기술을 사용할 수 없다!`,!0),{damage:0,battleEnded:!1};n.playerAttacking.value=!0,yield this.delay(ue.ATTACK),n.playerAttacking.value=!1;const i=Te.calculateDamage(t,a,e,s);return a.hp=Math.max(0,a.hp-i),s(_.USED_MOVE(t.name,e.name,i),!0),yield this.applyMoveEffects(e,t,a,i,s),this.consumePP(e,t),n.opponentTakingDamage.value=!0,yield this.delay(ue.DAMAGE),n.opponentTakingDamage.value=!1,a.hp===0?(s(`${_.FAINTED(a.name)} ${_.YOU_WIN}`,!0),{damage:i,battleEnded:!0,winnerIsPlayer:!0}):K.processEndOfTurnEffects(a,s)?(s(`${_.FAINTED(a.name)} ${_.YOU_WIN}`,!0),{damage:i,battleEnded:!0,winnerIsPlayer:!0}):{damage:i,battleEnded:!1}})}static executeOpponentTurn(e,t,a,s,n){return z(this,null,function*(){if(!K.canAct(t,a))return K.processEndOfTurnEffects(t,a)?(a(`${_.FAINTED(t.name)} ${_.YOU_WIN}`,!1),{damage:0,battleEnded:!0,winnerIsPlayer:!0}):{damage:0,battleEnded:!1};const i=n||this.selectOpponentMove(t);if(t.status==="Taunted"&&i.category==="Status")return a(`${t.name}은(는) 도발에 걸려 상태 기술을 사용할 수 없다!`,!1),{damage:0,battleEnded:!1};s.opponentAttacking.value=!0,yield this.delay(ue.ATTACK),s.opponentAttacking.value=!1;const o=Te.calculateDamage(t,e,i,a);return e.hp=Math.max(0,e.hp-o),a(_.USED_MOVE(t.name,i.name,o),!1),yield this.applyMoveEffects(i,t,e,o,a),this.consumePP(i,t),s.playerTakingDamage.value=!0,yield this.delay(ue.DAMAGE),s.playerTakingDamage.value=!1,e.hp===0?(a(`${_.FAINTED(e.name)} ${_.YOU_LOSE}`,!1),{damage:o,battleEnded:!0,winnerIsPlayer:!1}):{damage:o,battleEnded:!1}})}static applyMoveEffects(e,t,a,s,n){return z(this,null,function*(){var i,o,l;if((i=e.statChanges)!=null&&i.length&&X.applyStatChanges(a,e.statChanges,n),(o=e.selfStatChanges)!=null&&o.length&&X.applyStatChanges(t,e.selfStatChanges,n),(l=e.specialEffects)!=null&&l.length){const f=X.processSpecialEffects(e,t,a,s,n);if(f.recoilDamage>0&&(t.hp=Math.max(0,t.hp-f.recoilDamage)),f.drainHeal>0){const y=Math.min(f.drainHeal,t.maxHp-t.hp);t.hp+=y}}K.applyStatusEffect(e,t,a,n)})}static selectOpponentMove(e){const t=e.moves.filter(a=>a.pp>0);return t.length===0?e.moves[0]:t[Math.floor(Math.random()*t.length)]}static consumePP(e,t){const a=t.moves.find(s=>s.name===e.name);a&&a.pp>0&&a.pp--}static delay(e){return new Promise(t=>setTimeout(t,e))}}class At{static generateMoveTooltip(e){var s;const t=[];t.push(this.buildBasicInfoSection(e)),e.statusEffect&&t.push(this.buildStatusEffectSection(e));const a=this.buildStatChangeSection(e);return a&&t.push(a),(s=e.specialEffects)!=null&&s.length&&t.push(this.buildSpecialEffectsSection(e.specialEffects)),e.flavorText&&t.push(`
${e.flavorText}`),t.join("")}static buildBasicInfoSection(e){let t=`**${e.name}**
`;return t+=`타입: ${e.type}
`,t+=`위력: ${e.power||"—"}
`,t+=`정확도: ${e.accuracy?`${e.accuracy}%`:"—"}
`,t+=`분류: ${e.category||"—"}
`,t+=`PP: ${e.pp}/${e.maxPp}
`,e.priority&&e.priority!==0&&(t+=`우선도: ${e.priority>0?"+":""}${e.priority}
`),t}static buildStatusEffectSection(e){let t=`
📌 상태이상 효과:
`;return t+=`• ${this.getStatusEffectDescription(e.statusEffect)}
`,e.statusChance&&(t+=`• 발동 확률: ${e.statusChance}%
`),t}static buildStatChangeSection(e){var a,s;const t=[];return(a=e.statChanges)!=null&&a.length&&t.push(this.buildStatChangesSubsection("⚡ 상대 능력치 변화:",e.statChanges)),(s=e.selfStatChanges)!=null&&s.length&&t.push(this.buildStatChangesSubsection("💪 자신 능력치 변화:",e.selfStatChanges)),t.length?`
${t.join("")}`:null}static buildStatChangesSubsection(e,t){let a=`${e}
`;for(const s of t){const n=F.getStatName(s.stat),i=s.stages>0?"상승":"하락",o=Math.abs(s.stages);a+=`• ${n} ${i} ${o}단계
`}return a}static buildSpecialEffectsSection(e){let t=`
✨ 특수 효과:
`;for(const a of e)t+=`• ${this.getSpecialEffectDescription(a)}
`;return t}static getStatusEffectDescription(e){return e&&{Poisoned:"독 상태 - 매 턴 HP가 감소합니다",Paralyzed:"마비 상태 - 가끔 행동할 수 없고 스피드가 감소합니다",Burned:"화상 상태 - 매 턴 HP가 감소하고 물리공격력이 감소합니다",Frozen:"얼음 상태 - 행동할 수 없습니다 (불꽃 기술로 해제 가능)",Asleep:"잠 상태 - 몇 턴간 행동할 수 없습니다",Confused:"혼란 상태 - 가끔 자신을 공격할 수 있습니다"}[e]||""}static getSpecialEffectDescription(e){switch(e.type){case"recoil":return`반동 데미지 (가한 데미지의 ${Math.round((e.value||.25)*100)}%)`;case"drain":return`흡수 (가한 데미지의 ${Math.round((e.value||.5)*100)}% 회복)`;case"heal":return`자가 치유 (최대 HP의 ${Math.round((e.value||.5)*100)}% 회복)`;case"multiHit":return`${e.value||2}회 연속 공격`;case"flinch":return`풀죽음 효과 (${Math.round((e.chance||.3)*100)}% 확률)`;case"critRateUp":return"급소율 증가";case"priority":return`우선도 +${e.value||1}`;default:return e.type}}}const pe=[{name:"chikorita",types:["grass"],names:{en:"Chikorita",ko:"치코리타",ja:"チコリータ",fr:"Germignon",de:"Endivie",es:"Chikorita",it:"Chikorita",zh:"chikorita"}},{name:"cyndaquil",types:["fire"],names:{en:"Cyndaquil",ko:"브케인",ja:"ヒノアラシ",fr:"Héricendre",de:"Feurigel",es:"Cyndaquil",it:"Cyndaquil",zh:"cyndaquil"}},{name:"totodile",types:["water"],names:{en:"Totodile",ko:"리아코",ja:"ワニノコ",fr:"Kaiminus",de:"Karnimani",es:"Totodile",it:"Totodile",zh:"totodile"}},{name:"sentret",types:["normal"],names:{en:"Sentret",ko:"꼬리선",ja:"オタチ",fr:"Fouinette",de:"Wiesor",es:"Sentret",it:"Sentret",zh:"sentret"}},{name:"hoothoot",types:["normal","flying"],names:{en:"Hoothoot",ko:"부우부",ja:"ホーホー",fr:"Hoothoot",de:"Hoothoot",es:"Hoothoot",it:"Hoothoot",zh:"hoothoot"}},{name:"ledyba",types:["bug","flying"],names:{en:"Ledyba",ko:"레디바",ja:"レディバ",fr:"Coxy",de:"Ledyba",es:"Ledyba",it:"Ledyba",zh:"ledyba"}},{name:"spinarak",types:["bug","poison"],names:{en:"Spinarak",ko:"페이검",ja:"イトマル",fr:"Mimigal",de:"Webarak",es:"Spinarak",it:"Spinarak",zh:"spinarak"}},{name:"chinchou",types:["water","electric"],names:{en:"Chinchou",ko:"초라기",ja:"チョンチー",fr:"Loupio",de:"Lampi",es:"Chinchou",it:"Chinchou",zh:"chinchou"}},{name:"pichu",types:["electric"],names:{en:"Pichu",ko:"피츄",ja:"ピチュー",fr:"Pichu",de:"Pichu",es:"Pichu",it:"Pichu",zh:"pichu"}},{name:"cleffa",types:["fairy"],names:{en:"Cleffa",ko:"삐",ja:"ピィ",fr:"Mélo",de:"Pii",es:"Cleffa",it:"Cleffa",zh:"cleffa"}},{name:"igglybuff",types:["normal","fairy"],names:{en:"Igglybuff",ko:"푸푸린",ja:"ププリン",fr:"Toudoudou",de:"Fluffeluff",es:"Igglybuff",it:"Igglybuff",zh:"igglybuff"}},{name:"togepi",types:["fairy"],names:{en:"Togepi",ko:"토게피",ja:"トゲピー",fr:"Togepi",de:"Togepi",es:"Togepi",it:"Togepi",zh:"togepi"}},{name:"natu",types:["psychic","flying"],names:{en:"Natu",ko:"네이티",ja:"ネイティ",fr:"Natu",de:"Natu",es:"Natu",it:"Natu",zh:"natu"}},{name:"mareep",types:["electric"],names:{en:"Mareep",ko:"메리프",ja:"メリープ",fr:"Wattouat",de:"Voltilamm",es:"Mareep",it:"Mareep",zh:"mareep"}},{name:"hoppip",types:["grass","flying"],names:{en:"Hoppip",ko:"통통코",ja:"ハネッコ",fr:"Granivol",de:"Hoppspross",es:"Hoppip",it:"Hoppip",zh:"hoppip"}},{name:"aipom",types:["normal"],names:{en:"Aipom",ko:"에이팜",ja:"エイパム",fr:"Capumain",de:"Griffel",es:"Aipom",it:"Aipom",zh:"aipom"}},{name:"sunkern",types:["grass"],names:{en:"Sunkern",ko:"해너츠",ja:"ヒマナッツ",fr:"Tournegrin",de:"Sonnkern",es:"Sunkern",it:"Sunkern",zh:"sunkern"}},{name:"yanma",types:["bug","flying"],names:{en:"Yanma",ko:"왕자리",ja:"ヤンヤンマ",fr:"Yanma",de:"Yanma",es:"Yanma",it:"Yanma",zh:"yanma"}},{name:"wooper",types:["water","ground"],names:{en:"Wooper",ko:"우파",ja:"ウパー",fr:"Axoloto",de:"Felino",es:"Wooper",it:"Wooper",zh:"wooper"}},{name:"murkrow",types:["dark","flying"],names:{en:"Murkrow",ko:"니로우",ja:"ヤミカラス",fr:"Cornèbre",de:"Kramurx",es:"Murkrow",it:"Murkrow",zh:"murkrow"}},{name:"misdreavus",types:["ghost"],names:{en:"Misdreavus",ko:"무우마",ja:"ムウマ",fr:"Feuforêve",de:"Traunfugil",es:"Misdreavus",it:"Misdreavus",zh:"misdreavus"}},{name:"unown",types:["psychic"],names:{en:"Unown",ko:"안농",ja:"アンノーン",fr:"Zarbi",de:"Icognito",es:"Unown",it:"Unown",zh:"unown"}},{name:"girafarig",types:["normal","psychic"],names:{en:"Girafarig",ko:"키링키",ja:"キリンリキ",fr:"Girafarig",de:"Girafarig",es:"Girafarig",it:"Girafarig",zh:"girafarig"}},{name:"pineco",types:["bug"],names:{en:"Pineco",ko:"피콘",ja:"クヌギダマ",fr:"Pomdepik",de:"Tannza",es:"Pineco",it:"Pineco",zh:"pineco"}},{name:"dunsparce",types:["normal"],names:{en:"Dunsparce",ko:"노고치",ja:"ノコッチ",fr:"Insolourdo",de:"Dummisel",es:"Dunsparce",it:"Dunsparce",zh:"dunsparce"}},{name:"gligar",types:["ground","flying"],names:{en:"Gligar",ko:"글라이거",ja:"グライガー",fr:"Scorplane",de:"Skorgla",es:"Gligar",it:"Gligar",zh:"gligar"}},{name:"snubbull",types:["fairy"],names:{en:"Snubbull",ko:"블루",ja:"ブルー",fr:"Snubbull",de:"Snubbull",es:"Snubbull",it:"Snubbull",zh:"snubbull"}},{name:"qwilfish",types:["water","poison"],names:{en:"Qwilfish",ko:"침바루",ja:"ハリーセン",fr:"Qwilfish",de:"Baldorfish",es:"Qwilfish",it:"Qwilfish",zh:"qwilfish"}},{name:"shuckle",types:["bug","rock"],names:{en:"Shuckle",ko:"단단지",ja:"ツボツボ",fr:"Caratroc",de:"Pottrott",es:"Shuckle",it:"Shuckle",zh:"shuckle"}},{name:"heracross",types:["bug","fighting"],names:{en:"Heracross",ko:"헤라크로스",ja:"ヘラクロス",fr:"Scarhino",de:"Skaraborn",es:"Heracross",it:"Heracross",zh:"heracross"}},{name:"sneasel",types:["dark","ice"],names:{en:"Sneasel",ko:"포푸니",ja:"ニューラ",fr:"Farfuret",de:"Sniebel",es:"Sneasel",it:"Sneasel",zh:"sneasel"}},{name:"teddiursa",types:["normal"],names:{en:"Teddiursa",ko:"깜지곰",ja:"ヒメグマ",fr:"Teddiursa",de:"Teddiursa",es:"Teddiursa",it:"Teddiursa",zh:"teddiursa"}},{name:"slugma",types:["fire"],names:{en:"Slugma",ko:"마그마그",ja:"マグマッグ",fr:"Limagma",de:"Schneckmag",es:"Slugma",it:"Slugma",zh:"slugma"}},{name:"swinub",types:["ice","ground"],names:{en:"Swinub",ko:"꾸꾸리",ja:"ウリムー",fr:"Marcacrin",de:"Quiekel",es:"Swinub",it:"Swinub",zh:"swinub"}},{name:"corsola",types:["water","rock"],names:{en:"Corsola",ko:"코산호",ja:"サニーゴ",fr:"Corayon",de:"Corasonn",es:"Corsola",it:"Corsola",zh:"corsola"}},{name:"remoraid",types:["water"],names:{en:"Remoraid",ko:"총어",ja:"テッポウオ",fr:"Rémoraid",de:"Remoraid",es:"Remoraid",it:"Remoraid",zh:"remoraid"}},{name:"delibird",types:["ice","flying"],names:{en:"Delibird",ko:"딜리버드",ja:"デリバード",fr:"Cadoizo",de:"Botogel",es:"Delibird",it:"Delibird",zh:"delibird"}},{name:"meganium",types:["grass"],names:{en:"Meganium",ko:"메가니움",ja:"メガニウム",fr:"Méganium",de:"Meganie",es:"Meganium",it:"Meganium",zh:"meganium"}},{name:"quilava",types:["fire"],names:{en:"Quilava",ko:"마그케인",ja:"マグマラシ",fr:"Feurisson",de:"Igelavar",es:"Quilava",it:"Quilava",zh:"quilava"}},{name:"typhlosion",types:["fire"],names:{en:"Typhlosion",ko:"블레이범",ja:"バクフーン",fr:"Typhlosion",de:"Tornupto",es:"Typhlosion",it:"Typhlosion",zh:"typhlosion"}},{name:"croconaw",types:["water"],names:{en:"Croconaw",ko:"엘리게이",ja:"アリゲイツ",fr:"Crocrodil",de:"Tyracroc",es:"Croconaw",it:"Croconaw",zh:"croconaw"}},{name:"feraligatr",types:["water"],names:{en:"Feraligatr",ko:"장크로다일",ja:"オーダイル",fr:"Aligatueur",de:"Impergator",es:"Feraligatr",it:"Feraligatr",zh:"feraligatr"}},{name:"furret",types:["normal"],names:{en:"Furret",ko:"다꼬리",ja:"オオタチ",fr:"Fouinar",de:"Wiesenior",es:"Furret",it:"Furret",zh:"furret"}},{name:"noctowl",types:["normal","flying"],names:{en:"Noctowl",ko:"야부엉",ja:"ヨルノズク",fr:"Noarfang",de:"Noctuh",es:"Noctowl",it:"Noctowl",zh:"noctowl"}},{name:"ledian",types:["bug","flying"],names:{en:"Ledian",ko:"레디안",ja:"レディアン",fr:"Coxyclaque",de:"Ledian",es:"Ledian",it:"Ledian",zh:"ledian"}},{name:"ariados",types:["bug","poison"],names:{en:"Ariados",ko:"아리아도스",ja:"アリアドス",fr:"Migalos",de:"Ariados",es:"Ariados",it:"Ariados",zh:"ariados"}},{name:"crobat",types:["poison","flying"],names:{en:"Crobat",ko:"크로뱃",ja:"クロバット",fr:"Nostenfer",de:"Iksbat",es:"Crobat",it:"Crobat",zh:"crobat"}},{name:"lanturn",types:["water","electric"],names:{en:"Lanturn",ko:"랜턴",ja:"ランターン",fr:"Lanturn",de:"Lanturn",es:"Lanturn",it:"Lanturn",zh:"lanturn"}},{name:"togetic",types:["fairy","flying"],names:{en:"Togetic",ko:"토게틱",ja:"トゲチック",fr:"Togetic",de:"Togetic",es:"Togetic",it:"Togetic",zh:"togetic"}},{name:"xatu",types:["psychic","flying"],names:{en:"Xatu",ko:"네이티오",ja:"ネイティオ",fr:"Xatu",de:"Xatu",es:"Xatu",it:"Xatu",zh:"xatu"}},{name:"flaaffy",types:["electric"],names:{en:"Flaaffy",ko:"보송송",ja:"モココ",fr:"Lainergie",de:"Waaty",es:"Flaaffy",it:"Flaaffy",zh:"flaaffy"}},{name:"ampharos",types:["electric"],names:{en:"Ampharos",ko:"전룡",ja:"デンリュウ",fr:"Pharamp",de:"Ampharos",es:"Ampharos",it:"Ampharos",zh:"ampharos"}},{name:"bellossom",types:["grass"],names:{en:"Bellossom",ko:"아르코",ja:"キレイハナ",fr:"Joliflor",de:"Blubella",es:"Bellossom",it:"Bellossom",zh:"bellossom"}},{name:"marill",types:["water","fairy"],names:{en:"Marill",ko:"마릴",ja:"マリル",fr:"Marill",de:"Marill",es:"Marill",it:"Marill",zh:"marill"}},{name:"azumarill",types:["water","fairy"],names:{en:"Azumarill",ko:"마릴리",ja:"マリルリ",fr:"Azumarill",de:"Azumarill",es:"Azumarill",it:"Azumarill",zh:"azumarill"}},{name:"sudowoodo",types:["rock"],names:{en:"Sudowoodo",ko:"꼬지모",ja:"ウソッキー",fr:"Simularbre",de:"Mogelbaum",es:"Sudowoodo",it:"Sudowoodo",zh:"sudowoodo"}},{name:"politoed",types:["water"],names:{en:"Politoed",ko:"왕구리",ja:"ニョロトノ",fr:"Tarpaud",de:"Quaxo",es:"Politoed",it:"Politoed",zh:"politoed"}},{name:"skiploom",types:["grass","flying"],names:{en:"Skiploom",ko:"두코",ja:"ポポッコ",fr:"Floravol",de:"Hubelupf",es:"Skiploom",it:"Skiploom",zh:"skiploom"}},{name:"jumpluff",types:["grass","flying"],names:{en:"Jumpluff",ko:"솜솜코",ja:"ワタッコ",fr:"Cotovol",de:"Papungha",es:"Jumpluff",it:"Jumpluff",zh:"jumpluff"}},{name:"sunflora",types:["grass"],names:{en:"Sunflora",ko:"해루미",ja:"キマワリ",fr:"Héliatronc",de:"Sonnflora",es:"Sunflora",it:"Sunflora",zh:"sunflora"}},{name:"quagsire",types:["water","ground"],names:{en:"Quagsire",ko:"누오",ja:"ヌオー",fr:"Maraiste",de:"Morlord",es:"Quagsire",it:"Quagsire",zh:"quagsire"}},{name:"espeon",types:["psychic"],names:{en:"Espeon",ko:"에브이",ja:"エーフィ",fr:"Mentali",de:"Psiana",es:"Espeon",it:"Espeon",zh:"espeon"}},{name:"umbreon",types:["dark"],names:{en:"Umbreon",ko:"블래키",ja:"ブラッキー",fr:"Noctali",de:"Nachtara",es:"Umbreon",it:"Umbreon",zh:"umbreon"}},{name:"slowking",types:["water","psychic"],names:{en:"Slowking",ko:"야도킹",ja:"ヤドキング",fr:"Roigada",de:"Laschoking",es:"Slowking",it:"Slowking",zh:"slowking"}},{name:"wobbuffet",types:["psychic"],names:{en:"Wobbuffet",ko:"마자용",ja:"ソーナンス",fr:"Qulbutoké",de:"Woingenau",es:"Wobbuffet",it:"Wobbuffet",zh:"wobbuffet"}},{name:"forretress",types:["bug","steel"],names:{en:"Forretress",ko:"쏘콘",ja:"フォレトス",fr:"Foretress",de:"Forstellka",es:"Forretress",it:"Forretress",zh:"forretress"}},{name:"steelix",types:["steel","ground"],names:{en:"Steelix",ko:"강철톤",ja:"ハガネール",fr:"Steelix",de:"Stahlos",es:"Steelix",it:"Steelix",zh:"steelix"}},{name:"granbull",types:["fairy"],names:{en:"Granbull",ko:"그랑블루",ja:"グランブル",fr:"Granbull",de:"Granbull",es:"Granbull",it:"Granbull",zh:"granbull"}},{name:"scizor",types:["bug","steel"],names:{en:"Scizor",ko:"핫삼",ja:"ハッサム",fr:"Cizayox",de:"Scherox",es:"Scizor",it:"Scizor",zh:"scizor"}},{name:"ursaring",types:["normal"],names:{en:"Ursaring",ko:"링곰",ja:"リングマ",fr:"Ursaring",de:"Ursaring",es:"Ursaring",it:"Ursaring",zh:"ursaring"}},{name:"magcargo",types:["fire","rock"],names:{en:"Magcargo",ko:"마그카르고",ja:"マグカルゴ",fr:"Volcaropod",de:"Magcargo",es:"Magcargo",it:"Magcargo",zh:"magcargo"}},{name:"piloswine",types:["ice","ground"],names:{en:"Piloswine",ko:"메꾸리",ja:"イノムー",fr:"Cochignon",de:"Keifel",es:"Piloswine",it:"Piloswine",zh:"piloswine"}},{name:"octillery",types:["water"],names:{en:"Octillery",ko:"대포무노",ja:"オクタン",fr:"Octillery",de:"Octillery",es:"Octillery",it:"Octillery",zh:"octillery"}},{name:"skarmory",types:["steel","flying"],names:{en:"Skarmory",ko:"무장조",ja:"エアームド",fr:"Airmure",de:"Panzaeron",es:"Skarmory",it:"Skarmory",zh:"skarmory"}},{name:"houndour",types:["dark","fire"],names:{en:"Houndour",ko:"델빌",ja:"デルビル",fr:"Malosse",de:"Hunduster",es:"Houndour",it:"Houndour",zh:"houndour"}},{name:"phanpy",types:["ground"],names:{en:"Phanpy",ko:"코코리",ja:"ゴマゾウ",fr:"Phanpy",de:"Phanpy",es:"Phanpy",it:"Phanpy",zh:"phanpy"}},{name:"stantler",types:["normal"],names:{en:"Stantler",ko:"노라키",ja:"オドシシ",fr:"Cerfrousse",de:"Damhirplex",es:"Stantler",it:"Stantler",zh:"stantler"}},{name:"smeargle",types:["normal"],names:{en:"Smeargle",ko:"루브도",ja:"ドーブル",fr:"Queulorior",de:"Farbeagle",es:"Smeargle",it:"Smeargle",zh:"smeargle"}},{name:"tyrogue",types:["fighting"],names:{en:"Tyrogue",ko:"배루키",ja:"バルキー",fr:"Debugant",de:"Rabauz",es:"Tyrogue",it:"Tyrogue",zh:"tyrogue"}},{name:"smoochum",types:["ice","psychic"],names:{en:"Smoochum",ko:"뽀뽀라",ja:"ムチュール",fr:"Lippouti",de:"Kussilla",es:"Smoochum",it:"Smoochum",zh:"smoochum"}},{name:"elekid",types:["electric"],names:{en:"Elekid",ko:"에레키드",ja:"エレキッド",fr:"Élekid",de:"Elekid",es:"Elekid",it:"Elekid",zh:"elekid"}},{name:"magby",types:["fire"],names:{en:"Magby",ko:"마그비",ja:"ブビィ",fr:"Magby",de:"Magby",es:"Magby",it:"Magby",zh:"magby"}},{name:"miltank",types:["normal"],names:{en:"Miltank",ko:"밀탱크",ja:"ミルタンク",fr:"Écrémeuh",de:"Miltank",es:"Miltank",it:"Miltank",zh:"miltank"}},{name:"raikou",types:["electric"],names:{en:"Raikou",ko:"라이코",ja:"ライコウ",fr:"Raikou",de:"Raikou",es:"Raikou",it:"Raikou",zh:"raikou"}},{name:"entei",types:["fire"],names:{en:"Entei",ko:"앤테이",ja:"エンテイ",fr:"Entei",de:"Entei",es:"Entei",it:"Entei",zh:"entei"}},{name:"suicune",types:["water"],names:{en:"Suicune",ko:"스이쿤",ja:"スイクン",fr:"Suicune",de:"Suicune",es:"Suicune",it:"Suicune",zh:"suicune"}},{name:"larvitar",types:["rock","ground"],names:{en:"Larvitar",ko:"애버라스",ja:"ヨーギラス",fr:"Embrylex",de:"Larvitar",es:"Larvitar",it:"Larvitar",zh:"larvitar"}},{name:"lugia",types:["psychic","flying"],names:{en:"Lugia",ko:"루기아",ja:"ルギア",fr:"Lugia",de:"Lugia",es:"Lugia",it:"Lugia",zh:"lugia"}},{name:"ho-oh",types:["fire","flying"],names:{en:"Ho-Oh",ko:"칠색조",ja:"ホウオウ",fr:"Ho-Oh",de:"Ho-Oh",es:"Ho-Oh",it:"Ho-Oh",zh:"ho-oh"}},{name:"celebi",types:["psychic","grass"],names:{en:"Celebi",ko:"세레비",ja:"セレビィ",fr:"Celebi",de:"Celebi",es:"Celebi",it:"Celebi",zh:"celebi"}},{name:"houndoom",types:["dark","fire"],names:{en:"Houndoom",ko:"헬가",ja:"ヘルガー",fr:"Démolosse",de:"Hundemon",es:"Houndoom",it:"Houndoom",zh:"houndoom"}},{name:"kingdra",types:["water","dragon"],names:{en:"Kingdra",ko:"킹드라",ja:"キングドラ",fr:"Hyporoi",de:"Seedraking",es:"Kingdra",it:"Kingdra",zh:"kingdra"}},{name:"donphan",types:["ground"],names:{en:"Donphan",ko:"코리갑",ja:"ドンファン",fr:"Donphan",de:"Donphan",es:"Donphan",it:"Donphan",zh:"donphan"}},{name:"porygon2",types:["normal"],names:{en:"Porygon2",ko:"폴리곤2",ja:"ポリゴン２",fr:"Porygon2",de:"Porygon2",es:"Porygon2",it:"Porygon2",zh:"porygon2"}},{name:"hitmontop",types:["fighting"],names:{en:"Hitmontop",ko:"카포에라",ja:"カポエラー",fr:"Kapoera",de:"Kapoera",es:"Hitmontop",it:"Hitmontop",zh:"hitmontop"}},{name:"blissey",types:["normal"],names:{en:"Blissey",ko:"해피너스",ja:"ハピナス",fr:"Leuphorie",de:"Heiteira",es:"Blissey",it:"Blissey",zh:"blissey"}},{name:"pupitar",types:["rock","ground"],names:{en:"Pupitar",ko:"데기라스",ja:"サナギラス",fr:"Ymphect",de:"Pupitar",es:"Pupitar",it:"Pupitar",zh:"pupitar"}},{name:"tyranitar",types:["rock","dark"],names:{en:"Tyranitar",ko:"마기라스",ja:"バンギラス",fr:"Tyranocif",de:"Despotar",es:"Tyranitar",it:"Tyranitar",zh:"tyranitar"}},{name:"bayleef",types:["grass"],names:{en:"Bayleef",ko:"베이리프",ja:"ベイリーフ",fr:"Macronium",de:"Lorblatt",es:"Bayleef",it:"Bayleef",zh:"bayleef"}},{name:"mantine",types:["water","flying"],names:{en:"Mantine",ko:"만타인",ja:"マンタイン",fr:"Démanta",de:"Mantax",es:"Mantine",it:"Mantine",zh:"mantine"}}];function Ct(){const r=$(null),e=$(null),t=$([]),a=$(!1),s=$(!1),n=$(!1),i=$(!1),o=$(!1),l=$(!1),f=$(!0),y=$("초기화 중..."),S=$(void 0),p=$(!1),h=$(null),T=j(()=>{if(!r.value||!e.value)return"linear-gradient(to bottom right, #a0a0a0, #c0c0c0)";const E=he[U(r.value.englishType[0])]||"#a0a0a0",M=he[U(e.value.englishType[0])]||"#c0c0c0";return`linear-gradient(to top right, ${E}, ${M})`});function P(E,M=!1){t.value.unshift({message:E,isPlayerTurn:M})}function D(){r.value=null,e.value=null,t.value=[],a.value=!1,s.value=!1}function B(E){var le;let M=pe[Math.floor(Math.random()*pe.length)],N=M.name;if(E)for(;N===E;)M=pe[Math.floor(Math.random()*pe.length)],N=M.name;const x=((le=M.names)==null?void 0:le.ko)||N;return{englishName:N,displayName:x}}function c(){return z(this,null,function*(){D(),f.value=!0,y.value="포켓몬 데이터를 불러오는 중...";try{const E=B(),M=B(E.englishName);r.value=yield fe.fetchPokemonData(E.englishName,!0),e.value=yield fe.fetchPokemonData(M.englishName,!1),r.value&&e.value?(f.value=!1,y.value="",k()):(P("포켓몬 데이터를 불러오는데 실패했습니다. 다시 시도해주세요.",!1),a.value=!0,f.value=!1)}catch(E){console.error("배틀 초기화 중 오류 발생:",E),P("포켓몬 데이터를 불러오는데 실패했습니다. 다시 시도해주세요.",!1),a.value=!0,f.value=!1}})}function k(){return z(this,null,function*(){!r.value||!e.value||(t.value=[{message:_.WILD_POKEMON_APPEARED(e.value.name),isPlayerTurn:!1},{message:_.GO_POKEMON(r.value.name),isPlayerTurn:!0}],a.value=!1)})}function b(E){return z(this,null,function*(){var N;if(a.value||s.value)return;s.value=!0,S.value=void 0;const M={playerAttacking:n,opponentTakingDamage:i,opponentAttacking:o,playerTakingDamage:l};try{const x=yield _t.executeTurn(E,r.value,e.value,P,M);if(x.playerTurnResult.battleEnded||(N=x.opponentTurnResult)!=null&&N.battleEnded){a.value=!0,s.value=!1;return}yield R(),s.value=!1}catch(x){console.error("턴 처리 중 오류 발생:",x),s.value=!1}})}function R(){return z(this,null,function*(){var E,M;try{(E=r.value)!=null&&E.allMoves&&(r.value.moves=yield fe.processPokemonMoves(r.value.allMoves)),(M=e.value)!=null&&M.allMoves&&(e.value.moves=yield fe.processPokemonMoves(e.value.allMoves))}catch(N){console.error("기술 새로고침 중 오류 발생:",N)}})}function q(){c()}function L(E){return At.generateMoveTooltip(E)}function W(E){p.value||(S.value=L(E))}function Q(){p.value||(S.value=void 0)}function Z(E){h.value=E,p.value=!0,S.value=L(E)}function H(){p.value=!1,h.value=null,S.value=void 0}return{playerPokemon:r,opponentPokemon:e,battleLog:t,isBattleOver:a,processingTurn:s,playerAttacking:n,opponentTakingDamage:i,opponentAttacking:o,playerTakingDamage:l,isLoading:f,loadingMessage:y,hoveredMoveDescription:S,isPinnedTooltip:p,pinnedMove:h,battleScreenBackground:T,initializeBattle:c,startBattle:k,handlePlayerMove:b,restartBattle:q,handleMouseoverMove:W,handleMouseleaveMove:Q,handleRightClickMove:Z,closePinnedTooltip:H}}const wt={key:0,class:"loading-screen"},Pt=["innerHTML"],zt={class:"battle-top"},$t={class:"opponent-pokemon-container"},Ft={class:"player-pokemon-container"},Ot={key:0,class:"tooltip-header"},jt={class:"tooltip-title"},Dt={class:"tooltip-content"},Nt={class:"move-description-text"},Bt={class:"battle-bottom"},Rt={class:"battle-controls"},It={key:0,class:"move-buttons-grid"},Ht=ne({__name:"BattleScreen",setup(r){const e=$(!1),{playerPokemon:t,opponentPokemon:a,battleLog:s,isBattleOver:n,processingTurn:i,playerAttacking:o,opponentTakingDamage:l,opponentAttacking:f,playerTakingDamage:y,isLoading:S,loadingMessage:p,hoveredMoveDescription:h,isPinnedTooltip:T,pinnedMove:P,battleScreenBackground:D,initializeBattle:B,startBattle:c,handlePlayerMove:k,restartBattle:b,handleMouseoverMove:R,handleMouseleaveMove:q,handleRightClickMove:L,closePinnedTooltip:W}=Ct();ze(()=>z(this,null,function*(){yield B()}));const Q=Z=>{e.value=Z};return(Z,H)=>{var E;return g(S)?(m(),v("div",wt,[u("div",{innerHTML:g(p)},null,8,Pt)])):g(t)&&g(a)?(m(),v("div",{key:1,class:"battle-screen",style:A({background:g(D)})},[u("div",zt,[u("div",$t,[te(ge,{pokemon:g(a),"is-attacking":g(f),"is-taking-damage":g(l),"is-opponent":!0,"show-overlay":e.value,onOverlayToggle:Q},null,8,["pokemon","is-attacking","is-taking-damage","show-overlay"]),te(ye,{class:"effectiveness-display",attackerTypes:g(a).englishType,defenderTypes:g(t).englishType,displayAttackerTypes:g(a).type,displayDefenderTypes:g(t).type},null,8,["attackerTypes","defenderTypes","displayAttackerTypes","displayDefenderTypes"])]),u("div",Ft,[te(ye,{class:"effectiveness-display",attackerTypes:g(t).englishType,defenderTypes:g(a).englishType,displayAttackerTypes:g(t).type,displayDefenderTypes:g(a).type},null,8,["attackerTypes","defenderTypes","displayAttackerTypes","displayDefenderTypes"]),te(ge,{pokemon:g(t),"is-attacking":g(o),"is-taking-damage":g(y),"show-overlay":e.value,onOverlayToggle:Q},null,8,["pokemon","is-attacking","is-taking-damage","show-overlay"])]),g(h)?(m(),v("div",{key:0,class:se(["move-description-display",{pinned:g(T)}])},[g(T)?(m(),v("div",Ot,[u("span",jt,d((E=g(P))==null?void 0:E.name)+" 정보",1),u("button",{class:"close-button",onClick:H[0]||(H[0]=(...M)=>g(W)&&g(W)(...M))},"✕")])):w("",!0),u("div",Dt,[u("pre",Nt,d(g(h)),1)])],2)):w("",!0)]),u("div",Bt,[te(Tt,{logs:g(s)},null,8,["logs"]),u("div",Rt,[g(n)?w("",!0):(m(),v("div",It,[(m(!0),v(ae,null,oe(g(t).moves,M=>(m(),$e(St,{key:M.name,move:M,"opponent-types":g(a).englishType,onClick:N=>g(k)(M),onMouseoverMove:g(R),onMouseleaveMove:g(q),onRightClickMove:g(L),disabled:g(i)},null,8,["move","opponent-types","onClick","onMouseoverMove","onMouseleaveMove","onRightClickMove","disabled"]))),128))])),g(n)?(m(),v("button",{key:1,onClick:H[1]||(H[1]=(...M)=>g(b)&&g(b)(...M)),class:"restart-button"}," Restart Battle ")):w("",!0)])])],4)):w("",!0)}}}),xt=ne({__name:"App",setup(r){return(e,t)=>(m(),v("main",null,[te(Ht)]))}});const be=Fe(xt);be.config.errorHandler=(r,e,t)=>{G.logError(r,`Vue Error: ${t}`)};window.addEventListener("error",r=>{G.logError(new Error(r.message),"Global Error")});window.addEventListener("unhandledrejection",r=>{G.logError(new Error(r.reason),"Unhandled Promise Rejection")});be.mount("#app");
