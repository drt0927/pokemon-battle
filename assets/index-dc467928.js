var we=Object.defineProperty;var Pe=(r,e,t)=>e in r?we(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var B=(r,e,t)=>(Pe(r,typeof e!="symbol"?e+"":e,t),t);var $=(r,e,t)=>new Promise((a,s)=>{var n=o=>{try{c(t.next(o))}catch(f){s(f)}},i=o=>{try{c(t.throw(o))}catch(f){s(f)}},c=o=>o.done?a(o.value):Promise.resolve(o.value).then(n,i);c((t=t.apply(r,e)).next())});import{d as te,r as P,c as j,o as m,a as S,b as u,t as h,F as J,e as re,n as _,f as ee,u as g,g as w,w as $e,h as ze,i as q,j as De,k as Fe}from"./vue-vendor-ed91baa0.js";import{x as Ee}from"./pokemon-api-e9e98d61.js";import{s as je,a as Oe}from"./http-client-7ddc9825.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function a(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();const Te={Normal:{Rock:.5,Steel:.5,Ghost:0},Fire:{Fire:.5,Water:.5,Rock:.5,Dragon:.5,Grass:2,Ice:2,Bug:2,Steel:2},Water:{Water:.5,Grass:.5,Dragon:.5,Fire:2,Ground:2,Rock:2},Electric:{Electric:.5,Grass:.5,Dragon:.5,Water:2,Flying:2,Ground:0},Grass:{Fire:.5,Grass:.5,Poison:.5,Flying:.5,Bug:.5,Dragon:.5,Steel:.5,Water:2,Ground:2,Rock:2},Ice:{Fire:.5,Water:.5,Ice:.5,Steel:.5,Grass:2,Ground:2,Flying:2,Dragon:2},Fighting:{Poison:.5,Flying:.5,Psychic:.5,Bug:.5,Fairy:.5,Normal:2,Ice:2,Rock:2,Dark:2,Steel:2,Ghost:0},Poison:{Poison:.5,Ground:.5,Rock:.5,Ghost:.5,Grass:2,Fairy:2,Steel:0},Ground:{Grass:.5,Bug:.5,Fire:2,Electric:2,Poison:2,Rock:2,Steel:2,Flying:0},Flying:{Electric:.5,Rock:.5,Steel:.5,Grass:2,Fighting:2,Bug:2},Psychic:{Psychic:.5,Steel:.5,Fighting:2,Poison:2,Dark:0},Bug:{Fire:.5,Fighting:.5,Poison:.5,Flying:.5,Ghost:.5,Steel:.5,Fairy:.5,Grass:2,Psychic:2,Dark:2},Rock:{Fighting:.5,Ground:.5,Steel:.5,Fire:2,Ice:2,Flying:2,Bug:2},Ghost:{Dark:.5,Psychic:2,Ghost:2,Normal:0},Dragon:{Steel:.5,Dragon:2,Fairy:0},Dark:{Fighting:.5,Dark:.5,Fairy:.5,Psychic:2,Ghost:2},Steel:{Fire:.5,Water:.5,Electric:.5,Steel:.5,Ice:2,Rock:2,Fairy:2},Fairy:{Fire:.5,Poison:.5,Steel:.5,Fighting:2,Dragon:2,Dark:2}},Ne={Normal:"#A8A77A",Fire:"#EE8130",Water:"#6390F0",Electric:"#F7D02C",Grass:"#7AC74C",Ice:"#96D9D6",Fighting:"#C22E28",Poison:"#A33EA1",Ground:"#E2BF65",Flying:"#A98FF3",Psychic:"#F95587",Bug:"#A6B91A",Rock:"#B6A136",Ghost:"#735797",Dragon:"#6F35FC",Dark:"#705746",Steel:"#B7B7CE",Fairy:"#D685AD"};function Me(r,e){var t,a;return(a=(t=Te[r])==null?void 0:t[e])!=null?a:1}function G(r){return r?r.charAt(0).toUpperCase()+r.slice(1):""}const fe=Ne;class ce{static applyStatusEffect(e,t,a,s){if(!e.statusEffect)return!1;if(a.status!==null)return s(`${a.name}은(는) 이미 상태이상에 걸려있다!`,!0),!1;const n=e.statusChance||100;return Math.random()*100>n?!1:this.setStatusEffect(a,e.statusEffect,s)}static setStatusEffect(e,t,a){if(e.status!==null)return!1;switch(e.status=t,e.statusTurns=0,t){case"Poisoned":a(`${e.name}이(가) 독에 걸렸다!`,!0);break;case"Paralyzed":a(`${e.name}이(가) 마비되었다!`,!0);break;case"Burned":a(`${e.name}이(가) 화상을 입었다!`,!0);break;case"Frozen":a(`${e.name}이(가) 얼어붙었다!`,!0);break;case"Asleep":a(`${e.name}이(가) 잠들었다!`,!0);break;case"Confused":a(`${e.name}이(가) 혼란에 빠졌다!`,!0);break}return!0}static cureStatus(e,t){if(e.status===null)return;const a=e.status;switch(e.status=null,e.statusTurns=0,a){case"Poisoned":t(`${e.name}의 독이 치료되었다!`,!0);break;case"Paralyzed":t(`${e.name}의 마비가 치료되었다!`,!0);break;case"Burned":t(`${e.name}의 화상이 치료되었다!`,!0);break;case"Frozen":t(`${e.name}의 얼음이 치료되었다!`,!0);break;case"Asleep":t(`${e.name}이(가) 깨어났다!`,!0);break;case"Confused":t(`${e.name}의 혼란이 치료되었다!`,!0);break}}static isImmune(e,t){switch(t){case"Burned":return e.type.includes("Fire")||e.englishType.includes("Fire");case"Frozen":return e.type.includes("Ice")||e.englishType.includes("Ice");case"Poisoned":return e.type.includes("Poison")||e.type.includes("Steel")||e.englishType.includes("Poison")||e.englishType.includes("Steel");default:return!1}}}const O={PARALYSIS_CHANCE:.25,STATUS_EFFECT_CHANCE:.3,MAX_STATUS_TURNS:4,POISON_DAMAGE_RATIO:1/8,RANDOM_FACTOR_MIN:85,RANDOM_FACTOR_MAX:100,STAB_MULTIPLIER:1.5,ABILITY_MULTIPLIER:.5,LEVEL:50,MAX_MOVES:4},ne={ATTACK:300,DAMAGE:300,TURN_DELAY:1e3},A={WILD_POKEMON_APPEARED:r=>`야생의 ${r}이(가) 나타났다!`,GO_POKEMON:r=>`가자, ${r}!`,USED_MOVE:(r,e,t)=>`${r}이(가) ${e}을(를) 사용해서 ${t} 데미지를 입혔다!`,POISONED:r=>`${r}이(가) 독에 걸렸다!`,PARALYZED:r=>`${r}이(가) 마비되었다! 움직이지 못할 수도 있다!`,POISON_DAMAGE:(r,e)=>`${r}이(가) 독으로 ${e} 데미지를 받았다!`,NO_LONGER_POISONED:r=>`${r}의 독이 치료되었다!`,NO_LONGER_PARALYZED:r=>`${r}의 마비가 풀렸다!`,PARALYZED_CANT_MOVE:r=>`${r}은(는) 마비로 인해 움직일 수 없다!`,SHOOK_OFF_PARALYSIS:r=>`${r}이(가) 마비를 떨쳐냈다!`,FAINTED:r=>`${r}이(가) 쓰러졌다!`,YOU_WIN:"승리했다!",YOU_LOSE:"패배했다!",SUPER_EFFECTIVE:"효과가 굉장했다!",NOT_VERY_EFFECTIVE:"효과가 별로인 듯하다...",NO_EFFECT:r=>`${r}에게는 효과가 없는 것 같다...`,LEVITATE_AVOID:r=>`${r}이(가) 부유 특성으로 공격을 피했다!`,NO_PP:r=>`${r}의 PP가 부족하다!`,FAINTED_FROM_POISON:r=>`${r}이(가) 독으로 쓰러졌다!`};class he{static canAct(e,t){if(!e.status)return!0;switch(e.status){case"Paralyzed":return this.processParalysis(e,t);case"Frozen":return this.processFrozen(e,t);case"Asleep":return this.processSleep(e,t);case"Confused":return this.processConfusion(e,t);default:return!0}}static processEndOfTurnEffects(e,t){switch(e.status){case"Poisoned":return this.processPoisonDamage(e,t);case"Burned":return this.processBurnDamage(e,t);default:return!1}}static processParalysis(e,t){return e.status!=="Paralyzed"?!0:(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS?(t(A.NO_LONGER_PARALYZED(e.name),!0),e.status=null,e.statusTurns=0,!0):Math.random()<.25?(t(A.PARALYZED_CANT_MOVE(e.name),!0),!1):!0)}static processPoisonDamage(e,t){if(e.status!=="Poisoned")return!1;if(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS)return t(`${e.name}의 독이 치료되었다!`,!0),e.status=null,e.statusTurns=0,!1;const a=Math.max(1,Math.floor(e.maxHp*.125));return e.hp=Math.max(0,e.hp-a),t(`${e.name}이(가) 독으로 ${a} 데미지를 받았다!`,!0),e.hp===0?(t(`${e.name}이(가) 독으로 쓰러졌다!`,!0),!0):!1}static processBurnDamage(e,t){if(e.status!=="Burned")return!1;if(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS)return t(`${e.name}의 화상이 나았다!`,!0),e.status=null,e.statusTurns=0,!1;const a=Math.max(1,Math.floor(e.maxHp*.0625));return e.hp=Math.max(0,e.hp-a),t(`${e.name}이(가) 화상으로 ${a} 데미지를 받았다!`,!0),e.hp===0?(t(`${e.name}이(가) 화상으로 쓰러졌다!`,!0),!0):!1}static processFrozen(e,t){return e.status!=="Frozen"?!0:(e.statusTurns++,e.statusTurns>=O.MAX_STATUS_TURNS||Math.random()<.2?(t(`${e.name}의 얼음이 녹았다!`,!0),e.status=null,e.statusTurns=0,!0):(t(`${e.name}은(는) 얼어서 움직일 수 없다!`,!0),!1))}static processSleep(e,t){return e.status!=="Asleep"?!0:(e.statusTurns++,e.statusTurns>=3||Math.random()<.25?(t(`${e.name}이(가) 깨어났다!`,!0),e.status=null,e.statusTurns=0,!0):(t(`${e.name}은(는) 잠들어 있다!`,!0),!1))}static processConfusion(e,t){if(e.status!=="Confused")return!0;if(e.statusTurns++,e.statusTurns>=4||Math.random()<.25)return t(`${e.name}의 혼란이 풀렸다!`,!0),e.status=null,e.statusTurns=0,!0;if(Math.random()<.5){const a=Math.floor(e.attack*.4);return e.hp=Math.max(0,e.hp-a),t(`${e.name}은(는) 혼란에 빠져 자신을 공격했다! ${a} 데미지!`,!0),e.hp===0&&t(`${e.name}이(가) 혼란으로 쓰러졌다!`,!0),!1}return t(`${e.name}은(는) 혼란스러워하고 있다!`,!0),!0}}class W{static getStatusIcon(e){switch(e){case"Poisoned":return"🟣";case"Paralyzed":return"⚡";case"Burned":return"🔥";case"Frozen":return"🧊";case"Asleep":return"💤";case"Confused":return"😵";default:return""}}static getStatusName(e){switch(e){case"Poisoned":return"독";case"Paralyzed":return"마비";case"Burned":return"화상";case"Frozen":return"얼음";case"Asleep":return"수면";case"Confused":return"혼란";default:return""}}static getStatusColor(e){switch(e){case"Poisoned":return"#8B4CB8";case"Paralyzed":return"#F4D03F";case"Burned":return"#E74C3C";case"Frozen":return"#5DADE2";case"Asleep":return"#6C3483";case"Confused":return"#F39C12";default:return"#BDC3C7"}}static getStatusDescription(e){switch(e){case"Poisoned":return"턴마다 최대 HP의 1/8만큼 데미지를 받습니다.";case"Paralyzed":return"25% 확률로 행동할 수 없으며, 스피드가 50% 감소합니다.";case"Burned":return"턴마다 최대 HP의 1/16만큼 데미지를 받고, 공격력이 50% 감소합니다.";case"Frozen":return"행동할 수 없으며, 매 턴 20% 확률로 해제됩니다.";case"Asleep":return"행동할 수 없으며, 매 턴 25% 확률로 깨어납니다.";case"Confused":return"50% 확률로 자신을 공격하며, 매 턴 25% 확률로 해제됩니다.";default:return""}}static getStatusDisplayText(e,t){const a=this.getStatusIcon(e),s=this.getStatusName(e);return`${a} ${s} (${t}턴)`}static getStatusTooltip(e,t){const a=this.getStatusName(e),s=this.getStatusDescription(e);return`${a} (${t}턴째)
${s}`}static getAllStatusEffects(){return["Poisoned","Paralyzed","Burned","Frozen","Asleep","Confused"].map(t=>({value:t,label:this.getStatusName(t),icon:this.getStatusIcon(t),color:this.getStatusColor(t)}))}}class Z{static applyStatusEffect(e,t,a,s){return ce.applyStatusEffect(e,t,a,s)}static setStatusEffect(e,t,a){return ce.setStatusEffect(e,t,a)}static cureStatus(e,t){ce.cureStatus(e,t)}static isImmune(e,t){return ce.isImmune(e,t)}static canAct(e,t){return he.canAct(e,t)}static processEndOfTurnEffects(e,t){return he.processEndOfTurnEffects(e,t)}static getStatusIcon(e){return W.getStatusIcon(e)}static getStatusName(e){return W.getStatusName(e)}static getStatusColor(e){return W.getStatusColor(e)}static getStatusDescription(e){return W.getStatusDescription(e)}static getStatusDisplayText(e,t){return W.getStatusDisplayText(e,t)}static getStatusTooltip(e,t){return W.getStatusTooltip(e,t)}static getAllStatusEffects(){return W.getAllStatusEffects()}}class D{static getStatMultiplier(e){return e>=0?(2+e)/2:2/(2+Math.abs(e))}static applyStatChanges(e,t,a){for(const s of t)this.applyStatChange(e,s,a)}static applyStatChange(e,t,a){const s=e.statStages[t.stat],n=Math.max(this.STAT_STAGE_MIN,Math.min(this.STAT_STAGE_MAX,s+t.stages));if(n===s){t.stages>0?a(`${e.name}의 ${this.getStatName(t.stat)}는 더 이상 올라가지 않는다!`,!0):a(`${e.name}의 ${this.getStatName(t.stat)}는 더 이상 내려가지 않는다!`,!0);return}e.statStages[t.stat]=n;const i=this.getStatName(t.stat),c=t.stages>0,o=this.STAGE_INTENSITY_MAP[Math.abs(t.stages)]||"";a(c?`${e.name}의 ${i}가 ${o}올라갔다!`:`${e.name}의 ${i}가 ${o}내려갔다!`,!0)}static getStatName(e){return this.STAT_NAMES[e]}static getEffectiveStat(e,t){const a=this.getBaseStat(e,t),s=this.getStatMultiplier(e.statStages[t]);return Math.floor(a*s)}static getBaseStat(e,t){switch(t){case"attack":return e.attack;case"defense":return e.defense;case"special-attack":return e.specialAttack;case"special-defense":return e.specialDefense;default:return this.DEFAULT_BASE_STAT_VALUE}}static resetStatStages(e){const t={attack:0,defense:0,"special-attack":0,"special-defense":0,speed:0,accuracy:0,evasion:0};e.statStages=t}}B(D,"STAT_STAGE_MIN",-6),B(D,"STAT_STAGE_MAX",6),B(D,"DEFAULT_BASE_STAT_VALUE",100),B(D,"STAT_NAMES",{attack:"공격력",defense:"방어력","special-attack":"특수공격","special-defense":"특수방어",speed:"스피드",accuracy:"명중률",evasion:"회피율"}),B(D,"STAGE_INTENSITY_MAP",{1:"",2:"크게 ",3:"대폭 "});const Be={class:"pokemon-name"},Re={class:"abilities"},Ie={class:"hp-bar"},He={class:"hp-status-container"},Le={class:"hp-text"},Ge={key:0,class:"stat-changes-container"},xe={class:"stat-changes-grid"},Ue=["src","alt"],Ve={class:"types"},We={key:1,class:"stats-overlay"},Ye={class:"hp-display"},Ke={class:"stats-grid"},Xe={class:"stat-line"},Qe={class:"stat-value"},qe={class:"stat-line"},Ze={class:"stat-value"},Je={class:"stat-line"},et={class:"stat-value"},tt={class:"stat-line"},at={class:"stat-value"},st={class:"stat-line"},nt={class:"stat-value"},rt={class:"stat-line"},it={class:"stat-value"},ot={class:"stat-line"},lt={class:"stat-value"},ct={class:"pokemon-info"},ut={class:"types-display"},pt={class:"abilities-display"},ft={key:0,class:"description-display"},ht=te({__name:"PokemonCard",props:{pokemon:{},isAttacking:{type:Boolean},isTakingDamage:{type:Boolean},isOpponent:{type:Boolean},showOverlay:{type:Boolean}},emits:["overlay-toggle"],setup(r,{emit:e}){const t=r,a=e,s=P(!1),n=j(()=>t.showOverlay!==void 0?t.showOverlay:s.value),i=()=>{t.showOverlay!==void 0?a("overlay-toggle",!0):s.value=!0},c=()=>{t.showOverlay!==void 0?a("overlay-toggle",!1):s.value=!1},o=l=>{const v=G(t.pokemon.englishType[l]);return fe[v]||"#A8A77A"},f=j(()=>{const l=t.pokemon.hp/t.pokemon.maxHp*100;return l>50?"#4CAF50":l>20?"#FFC107":"#F44336"}),y=j(()=>({boxShadow:`0 0 15px 5px ${t.isOpponent?"#dc3545":"#007bff"}, 0 0 10px 2px rgba(0,0,0,0.2)`})),M=(l,v)=>{const b=Math.max(0,4-v);switch(l){case"Poisoned":return`독 (${b}턴)`;case"Paralyzed":return`마비 (${b}턴)`;case"Burned":return`화상 (${b}턴)`;case"Frozen":return`얼음 (${b}턴)`;case"Asleep":return`수면 (${Math.max(0,3-v)}턴)`;case"Confused":return`혼란 (${Math.max(0,4-v)}턴)`;default:return l}},p=l=>t.pokemon.statStages[l]||0,d=l=>l===0?"":`${l>0?"+":""}${l}`,k=l=>l>0?"#4CAF50":l<0?"#F44336":"#ffffff",F=()=>{const l=p("accuracy");return l===0?100:l>0?Math.round(100*(3+l)/3):Math.round(100*3/(3+Math.abs(l)))},R=()=>{const l=p("evasion");return l===0?100:l>0?Math.round(100*(3+l)/3):Math.round(100*3/(3+Math.abs(l)))},I=j(()=>Object.values(t.pokemon.statStages).some(l=>l!==0));return(l,v)=>(m(),S("div",{class:ee(["pokemon-card",{"is-attacking":l.isAttacking,"is-taking-damage":l.isTakingDamage,"is-opponent":l.isOpponent}]),style:_(y.value),onMouseenter:i,onMouseleave:c},[u("h3",Be,"Lv."+h(l.pokemon.level)+" "+h(l.pokemon.name),1),u("div",Re,[(m(!0),S(J,null,re(l.pokemon.abilities,b=>(m(),S("span",{key:b,class:"ability-tag"},h(b),1))),128))]),u("div",Ie,[u("div",{class:"hp-bar-inner",style:_({width:l.pokemon.hp/l.pokemon.maxHp*100+"%",backgroundColor:f.value})},null,4)]),u("div",He,[l.pokemon.status?(m(),S("div",{key:0,class:ee(["status-indicator",l.pokemon.status.toLowerCase()])},h(g(Z).getStatusIcon(l.pokemon.status))+" "+h(M(l.pokemon.status,l.pokemon.statusTurns)),3)):w("",!0),u("p",Le,"HP: "+h(l.pokemon.hp)+" / "+h(l.pokemon.maxHp),1)]),I.value?(m(),S("div",Ge,[v[0]||(v[0]=u("div",{class:"stat-changes-title"},"능력치 변화:",-1)),u("div",xe,[(m(!0),S(J,null,re(l.pokemon.statStages,(b,N)=>(m(),S(J,{key:N},[b!==0?(m(),S("div",{key:0,class:"stat-change-item",style:_({color:k(b)})},h(g(D).getStatName(N))+" "+h(d(b)),5)):w("",!0)],64))),128))])])):w("",!0),u("img",{src:l.pokemon.sprite,alt:l.pokemon.name,class:"pokemon-sprite"},null,8,Ue),u("div",Ve,[(m(!0),S(J,null,re(l.pokemon.type,(b,N)=>(m(),S("span",{key:b,class:"type-tag",style:_({backgroundColor:o(N)})},h(b),5))),128))]),n.value?(m(),S("div",We,[u("h4",null,"Lv."+h(l.pokemon.level)+" "+h(l.pokemon.name),1),u("p",Ye,"HP: "+h(l.pokemon.hp)+" / "+h(l.pokemon.maxHp),1),u("div",Ke,[u("div",Xe,[v[1]||(v[1]=u("span",{class:"stat-label"},"공격력",-1)),u("span",Qe,[u("b",{style:_({color:k(p("attack"))})},h(l.pokemon.attack),5),p("attack")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("attack"))})}," ("+h(d(p("attack")))+") ",5)):w("",!0)])]),u("div",qe,[v[2]||(v[2]=u("span",{class:"stat-label"},"방어력",-1)),u("span",Ze,[u("b",{style:_({color:k(p("defense"))})},h(l.pokemon.defense),5),p("defense")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("defense"))})}," ("+h(d(p("defense")))+") ",5)):w("",!0)])]),u("div",Je,[v[3]||(v[3]=u("span",{class:"stat-label"},"특공",-1)),u("span",et,[u("b",{style:_({color:k(p("special-attack"))})},h(l.pokemon.specialAttack),5),p("special-attack")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("special-attack"))})}," ("+h(d(p("special-attack")))+") ",5)):w("",!0)])]),u("div",tt,[v[4]||(v[4]=u("span",{class:"stat-label"},"특방",-1)),u("span",at,[u("b",{style:_({color:k(p("special-defense"))})},h(l.pokemon.specialDefense),5),p("special-defense")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("special-defense"))})}," ("+h(d(p("special-defense")))+") ",5)):w("",!0)])]),u("div",st,[v[5]||(v[5]=u("span",{class:"stat-label"},"스피드",-1)),u("span",nt,[u("b",{style:_({color:k(p("speed"))})},h(l.pokemon.speed||"???"),5),p("speed")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("speed"))})}," ("+h(d(p("speed")))+") ",5)):w("",!0)])]),u("div",rt,[v[6]||(v[6]=u("span",{class:"stat-label"},"명중률",-1)),u("span",it,[u("b",{style:_({color:k(p("accuracy"))})},h(F())+"%",5),p("accuracy")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("accuracy"))})}," ("+h(d(p("accuracy")))+") ",5)):w("",!0)])]),u("div",ot,[v[7]||(v[7]=u("span",{class:"stat-label"},"회피율",-1)),u("span",lt,[u("b",{style:_({color:k(p("evasion"))})},h(R())+"%",5),p("evasion")!==0?(m(),S("span",{key:0,class:"stat-change-mini",style:_({color:k(p("evasion"))})}," ("+h(d(p("evasion")))+") ",5)):w("",!0)])])]),u("div",ct,[u("p",ut,h(l.pokemon.type.join(" / ")),1),u("p",pt,h(l.pokemon.abilities.join(", ")),1),l.pokemon.description?(m(),S("p",ft,h(l.pokemon.description),1)):w("",!0)])])):w("",!0)],38))}});const dt=(r,e)=>{const t=r.__vccOpts||r;for(const[a,s]of e)t[a]=s;return t},de=dt(ht,[["__scopeId","data-v-3682c024"]]),gt=["disabled"],yt={class:"move-name-container"},mt={class:"move-name"},St={class:"move-details"},vt=te({__name:"MoveButton",props:{move:{},opponentTypes:{},disabled:{type:Boolean}},emits:["mouseover-move","mouseleave-move","right-click-move"],setup(r,{emit:e}){const t=r,a=e,s=j(()=>{let o=1;return t.opponentTypes.forEach(f=>{o*=Me(G(t.move.englishType),G(f))}),o}),n=j(()=>s.value===0?"x0":s.value===.25?"x¼":s.value===.5?"x½":s.value===1?"":`x${s.value}`),i=j(()=>s.value>1?"super-effective":s.value<1&&s.value>0?"not-very-effective":s.value===0?"no-effect":""),c=j(()=>({backgroundColor:fe[G(t.move.englishType)]||"#A8A77A"}));return(o,f)=>(m(),S("button",{class:"move-button",style:_(c.value),disabled:o.disabled||o.move.pp<=0,onMouseover:f[0]||(f[0]=y=>a("mouseover-move",o.move)),onMouseleave:f[1]||(f[1]=y=>a("mouseleave-move")),onContextmenu:f[2]||(f[2]=$e(y=>a("right-click-move",o.move),["prevent"]))},[u("div",yt,[u("span",mt,h(o.move.name),1),n.value?(m(),S("span",{key:0,class:ee(["effectiveness-badge",i.value])},h(n.value),3)):w("",!0)]),u("div",St,[u("span",null,h(o.move.type),1),u("span",null,"PWR: "+h(o.move.power),1)])],44,gt))}}),kt={class:"battle-log"},Et=te({__name:"BattleLog",props:{logs:{}},setup(r){return(e,t)=>(m(),S("div",kt,[(m(!0),S(J,null,re(e.logs,(a,s)=>(m(),S("p",{key:s,class:ee({"player-turn":a.isPlayerTurn,"opponent-turn":!a.isPlayerTurn})},h(a.message),3))),128))]))}}),Tt={class:"arrow"},Mt={class:"effectiveness-text"},ge=te({__name:"TypeEffectivenessIndicator",props:{attackerTypes:{},defenderTypes:{},displayAttackerTypes:{},displayDefenderTypes:{}},setup(r){const e=r,t=j(()=>{let i=1;return e.attackerTypes.forEach(c=>{e.defenderTypes.forEach(o=>{i*=Me(G(c),G(o))})}),i}),a=j(()=>t.value>1?"→":t.value<1&&t.value>0?"⇀":t.value===0?"⨯":"→"),s=j(()=>t.value===0?"x0":t.value===.25?"x1/4":t.value===.5?"x1/2":t.value===1?"x1":`x${t.value}`),n=j(()=>t.value>1?"super-effective":t.value<1&&t.value>0?"not-very-effective":t.value===0?"no-effect":"normal-effectiveness");return(i,c)=>(m(),S("div",{class:ee(["type-effectiveness-indicator",n.value])},[u("span",null,h(i.displayAttackerTypes.join("/")),1),u("span",Tt,h(a.value),1),u("span",null,h(i.displayDefenderTypes.join("/")),1),u("span",Mt,"("+h(s.value)+")",1)],2))}});class L{static logError(e,t){const a={message:`${t?`[${t}] `:""}${e.message}`,timestamp:Date.now()};console.error("Application Error:",a)}}class bt{constructor(){B(this,"api");B(this,"typeCache",new Map);this.api=new Ee}getLocalizedEntry(e,t){const a=e.find(s=>s.language.name==="ko");return a?a[t]:void 0}mapPokeApiTypeToPokemonType(e){return $(this,null,function*(){if(this.typeCache.has(e))return this.typeCache.get(e);try{const t=yield this.api.pokemon.getTypeByName(e),s=[this.getLocalizedEntry(t.names,"name")||e,e];return this.typeCache.set(e,s),s}catch(t){L.logError(t,`Failed to fetch type data for ${e}`);const a=[e,e];return this.typeCache.set(e,a),a}})}mapDamageClass(e){switch(e){case"physical":return"Physical";case"special":return"Special";case"status":return"Status";default:return}}}class Y{static calculateStat(e,t=!1){const a=O.LEVEL;return t?Math.floor(.01*(2*e)*a)+a+10:Math.floor(.01*(2*e)*a)+5}static calculateBaseStats(e){return{hp:this.calculateStat(e.hp,!0),attack:this.calculateStat(e.attack),defense:this.calculateStat(e.defense),specialAttack:this.calculateStat(e["special-attack"]),specialDefense:this.calculateStat(e["special-defense"]),speed:this.calculateStat(e.speed)}}static initializeStatStages(){return{attack:0,defense:0,"special-attack":0,"special-defense":0,speed:0,accuracy:0,evasion:0}}}class ue{static extractStatusEffect(e){var s;const a=((s=(e.effect_entries||[]).find(n=>n.language.name==="en"))==null?void 0:s.effect)||"";return a.toLowerCase().includes("poison")?"Poisoned":a.toLowerCase().includes("paralyz")?"Paralyzed":a.toLowerCase().includes("burn")?"Burned":a.toLowerCase().includes("freez")?"Frozen":a.toLowerCase().includes("sleep")?"Asleep":a.toLowerCase().includes("confus")?"Confused":null}static extractStatusChance(e){return e.effect_chance||void 0}static mapApiStatToGameStat(e){return{attack:"attack",defense:"defense","special-attack":"special-attack","special-defense":"special-defense",speed:"speed",accuracy:"accuracy",evasion:"evasion"}[e]||null}static extractAllStatChanges(e){var c,o,f;const t=[],a=[],s=e.name.toLowerCase();console.log(`[${e.name}] Analyzing move data:`,{stat_changes:e.stat_changes,target:e.target,target_name:(c=e.target)==null?void 0:c.name});const i=((o=(e.effect_entries||[]).find(y=>y.language.name==="en"))==null?void 0:o.effect)||"";if(console.log(`[${e.name}] Effect text:`,i),e.stat_changes&&e.stat_changes.length>0)for(const y of e.stat_changes){const M=this.mapApiStatToGameStat(y.stat.name);if(M){Math.abs(y.change);const p=((f=e.target)==null?void 0:f.name)||"",d=["selected-pokemon","random-opponent","all-opponents","all-other-pokemon","opponents-field","entire-field"].includes(p),k=["user","users-field","ally","all-allies"].includes(p);console.log(`[${e.name}] stat: ${M}, change: ${y.change}, target: ${p}, isTargetMove: ${d}, isSelfMove: ${k}`),d?t.push({stat:M,stages:y.change}):k?a.push({stat:M,stages:y.change}):(console.log(`[${e.name}] ⚠️ Unknown target: ${p}, using fallback logic`),y.change>0?a.push({stat:M,stages:y.change}):y.change<0&&t.push({stat:M,stages:y.change}))}}return(!e.stat_changes||e.stat_changes.length===0)&&this.applyKnownMoveStatChanges(s,t,a,i),(t.length>0||a.length>0)&&console.log(`[${e.name}] 🎯 FINAL RESULT - Target:`,t,"Self:",a),{statChanges:t,selfStatChanges:a}}static applyKnownMoveStatChanges(e,t,a,s){if(["swords-dance","nasty-plot"].includes(e))a.push({stat:"attack",stages:2});else if(["harden","withdraw","acid-armor","barrier"].includes(e))a.push({stat:"defense",stages:e==="acid-armor"?2:1});else if(["agility"].includes(e))a.push({stat:"speed",stages:2});else if(["growl","leer","string-shot"].includes(e)){const n=e==="growl"?"attack":e==="string-shot"?"speed":"defense";t.push({stat:n,stages:-1})}else["tail-whip","screech"].includes(e)?t.push({stat:"defense",stages:e==="screech"?-2:-1}):this.applyTextBasedStatChanges(s,t,a)}static applyTextBasedStatChanges(e,t,a){if(e.toLowerCase().includes("raises the user's attack")){const s=e.includes("sharply")||e.includes("two stages")?2:1;a.push({stat:"attack",stages:s})}if(e.toLowerCase().includes("lowers the target's speed")){const s=e.includes("harshly")||e.includes("two stages")?-2:-1;t.push({stat:"speed",stages:s})}}static extractSpecialEffects(e){var i;const t=[],s=((i=(e.effect_entries||[]).find(c=>c.language.name==="en"))==null?void 0:i.effect)||"",n=e.name.toLowerCase();if((s.includes("recoil")||["double-edge","submission","take-down","wild-charge"].includes(n))&&t.push({type:"recoil",value:.25}),(s.includes("absorb")||s.includes("drain")||["absorb","mega-drain","giga-drain","leech-life"].includes(n))&&t.push({type:"drain",value:.5}),(s.includes("restores")||["recover","rest","roost","synthesis"].includes(n))&&t.push({type:"heal",value:.5}),s.includes("hits 2-5 times")||["fury-attack","pin-missile","spike-cannon"].includes(n)){const c=Math.floor(Math.random()*4)+2;t.push({type:"multiHit",value:c})}if(["double-slap","comet-punch"].includes(n)){const c=Math.floor(Math.random()*3)+2;t.push({type:"multiHit",value:c})}return(s.includes("flinch")||["bite","headbutt","stomp"].includes(n))&&t.push({type:"flinch",chance:.3}),(s.includes("critical hit")||["slash","razor-leaf","karate-chop"].includes(n))&&t.push({type:"critRateUp"}),e.priority>0&&t.push({type:"priority",value:e.priority}),t}}class _t{constructor(){B(this,"api");B(this,"cachedAxios");B(this,"typeMappingService");this.api=new Ee,this.typeMappingService=new bt,this.cachedAxios=je(Oe,{ttl:1e3*60*15})}processPokemonMoves(e){return $(this,null,function*(){try{const a=e.sort(()=>.5-Math.random()).slice(0,O.MAX_MOVES);return yield Promise.all(a.map(n=>$(this,null,function*(){var i;try{const c=yield this.api.move.getMoveByName(n.move.name),o=this.typeMappingService.getLocalizedEntry(c.flavor_text_entries,"flavor_text"),[f,y]=yield this.typeMappingService.mapPokeApiTypeToPokemonType(c.type.name),M=c.pp||1,p=ue.extractStatusEffect(c),d=ue.extractStatusChance(c),{statChanges:k,selfStatChanges:F}=ue.extractAllStatChanges(c),R=ue.extractSpecialEffects(c);return{name:this.typeMappingService.getLocalizedEntry(c.names,"name")||n.move.name,power:c.power||0,type:f,englishType:y,flavorText:o,pp:M,maxPp:M,accuracy:c.accuracy||100,category:this.typeMappingService.mapDamageClass((i=c.damage_class)==null?void 0:i.name),statusEffect:p,statusChance:d,statChanges:k,selfStatChanges:F,specialEffects:R,priority:c.priority||0}}catch(c){return L.logError(c,`Failed to process move: ${n.move.name}`),{name:n.move.name,power:40,type:"Normal",englishType:"Normal",flavorText:"No description available.",pp:10,maxPp:10,accuracy:100,category:"Physical",statusEffect:null,statusChance:void 0,statChanges:[],selfStatChanges:[],specialEffects:[],priority:0}}})))}catch(t){return L.logError(t,"Failed to process Pokemon moves"),[]}})}fetchPokemonData(e,t=!1){return $(this,null,function*(){var a,s,n,i,c,o,f,y,M,p;try{const d=yield this.api.pokemon.getPokemonByName(e),k=yield this.api.pokemon.getPokemonSpeciesByName(e),F=this.typeMappingService.getLocalizedEntry(k.names,"name")||d.name,R=this.typeMappingService.getLocalizedEntry(k.flavor_text_entries,"flavor_text"),I=d.stats.find(C=>C.stat.name==="hp"),l=d.stats.find(C=>C.stat.name==="attack"),v=d.stats.find(C=>C.stat.name==="defense"),b=d.stats.find(C=>C.stat.name==="special-attack"),N=d.stats.find(C=>C.stat.name==="special-defense"),x=d.stats.find(C=>C.stat.name==="speed"),U=[],V=[];yield Promise.all(d.types.map(C=>$(this,null,function*(){const[ae,Ce]=yield this.typeMappingService.mapPokeApiTypeToPokemonType(C.type.name);U.push(ae),V.push(Ce)})));const K=yield this.processPokemonMoves(d.moves),H=t?((s=(a=d.sprites.other)==null?void 0:a.showdown)==null?void 0:s.back_default)||((c=(i=(n=d.sprites.versions["generation-v"])==null?void 0:n["black-white"])==null?void 0:i.animated)==null?void 0:c.back_default)||d.sprites.back_default||d.sprites.front_default||"":((f=(o=d.sprites.other)==null?void 0:o.showdown)==null?void 0:f.front_default)||((p=(M=(y=d.sprites.versions["generation-v"])==null?void 0:y["black-white"])==null?void 0:M.animated)==null?void 0:p.front_default)||d.sprites.front_default||"",T=yield Promise.all(d.abilities.map(C=>$(this,null,function*(){try{const ae=yield this.api.pokemon.getAbilityByName(C.ability.name);return this.typeMappingService.getLocalizedEntry(ae.names,"name")||C.ability.name}catch(ae){return L.logError(ae,`Failed to fetch ability: ${C.ability.name}`),C.ability.name}}))),E=I?Y.calculateStat(I.base_stat,!0):100,z=l?Y.calculateStat(l.base_stat):50,oe=v?Y.calculateStat(v.base_stat):50,le=b?Y.calculateStat(b.base_stat):50,_e=N?Y.calculateStat(N.base_stat):50,Ae=x?Y.calculateStat(x.base_stat):50;return{name:F,hp:E,maxHp:E,attack:z,defense:oe,specialAttack:le,specialDefense:_e,speed:Ae,moves:K,allMoves:d.moves,sprite:H,type:U,englishType:V,abilities:T,level:O.LEVEL,description:R,status:null,statusTurns:0,statStages:Y.initializeStatStages()}}catch(d){return L.logError(d,`Failed to fetch Pokémon data: ${e}`),null}})}}const pe=new _t;class ye{static processSpecialEffects(e,t,a,s,n){let i=0,c=0;const o=[];if(!e.specialEffects)return{recoilDamage:i,drainHeal:c,additionalEffects:o};for(const f of e.specialEffects)switch(f.type){case"recoil":i+=this.processRecoilEffect(f,t,s,o);break;case"drain":c+=this.processDrainEffect(f,t,s,o);break;case"heal":this.processHealEffect(f,t,o);break;case"flinch":this.processFlinchEffect(f,a,o);break;case"multiHit":this.processMultiHitEffect(f,o);break}return{recoilDamage:i,drainHeal:c,additionalEffects:o}}static processRecoilEffect(e,t,a,s){const n=Math.floor(a*(e.value||.25));return t.hp=Math.max(0,t.hp-n),s.push(`${t.name}는 반동으로 ${n}의 데미지를 받았다!`),n}static processDrainEffect(e,t,a,s){const n=Math.floor(a*(e.value||.5)),i=Math.min(n,t.maxHp-t.hp);return t.hp+=i,s.push(`${t.name}가 ${i}만큼 체력을 흡수했다!`),i}static processHealEffect(e,t,a){const s=Math.floor(t.maxHp*(e.value||.5)),n=Math.min(s,t.maxHp-t.hp);t.hp+=n,a.push(`${t.name}가 ${n}만큼 체력을 회복했다!`)}static processFlinchEffect(e,t,a){const s=e.chance||.3;Math.random()<s&&a.push(`${t.name}가 풀죽었다!`)}static processMultiHitEffect(e,t){const a=e.value||2;t.push(`${a}번 연속 공격!`)}}class me{static getStatStagesDisplay(e){return Object.entries(e.statStages).filter(([t,a])=>a!==0).map(([t,a])=>this.formatStatStageDisplay(t,a))}static formatStatStageDisplay(e,t){const a=this.getStatName(e),s=t>0?"+":"";return`${a}: ${s}${t}`}static getStatName(e){return D.getStatName(e)}static getDetailedStatInfo(e){const t={};return Object.entries(e.statStages).forEach(([a,s])=>{const n=a,i=this.getStatName(n),c=this.getStatMultiplier(s),o=Math.round(c*100);t[i]=`${o}% (${s>=0?"+":""}${s})`}),t}static getStatMultiplier(e){return e>=0?(2+e)/2:2/(2+Math.abs(e))}}class ie{static applyMoveEffects(e,t,a,s,n){return e.statChanges&&e.statChanges.length>0&&D.applyStatChanges(a,e.statChanges,n),e.selfStatChanges&&e.selfStatChanges.length>0&&D.applyStatChanges(t,e.selfStatChanges,n),ye.processSpecialEffects(e,t,a,s,n)}static getStatMultiplier(e){return D.getStatMultiplier(e)}static applyStatChanges(e,t,a){D.applyStatChanges(e,t,a)}static processSpecialEffects(e,t,a,s,n){return ye.processSpecialEffects(e,t,a,s,n)}static getEffectiveStat(e,t){return D.getEffectiveStat(e,t)}static resetStatStages(e){D.resetStatStages(e)}static getStatStagesDisplay(e){return me.getStatStagesDisplay(e)}static getDetailedStatInfo(e){return me.getDetailedStatInfo(e)}}class X{static getTypeEffectiveness(e,t){var a,s;return(s=(a=Te[e])==null?void 0:a[t])!=null?s:1}static getMultiTypeEffectiveness(e,t){let a=1;return t.forEach(s=>{a*=this.getTypeEffectiveness(e,s)}),a}static logEffectiveness(e,t,a){e>1?a(A.SUPER_EFFECTIVE,!0):e===0?a(A.NO_EFFECT(t),!0):e<1&&a(A.NOT_VERY_EFFECTIVE,!0)}static getEffectivenessDescription(e){return e>1?"효과가 굉장했다!":e===0?"효과가 없다...":e<1?"효과가 별로인 듯하다...":""}static getEffectivenessColor(e){return e>1?"#E74C3C":e===0?"#7F8C8D":e<1?"#3498DB":"#2ECC71"}static capitalizeFirstLetter(e){return e?e.charAt(0).toUpperCase()+e.slice(1):""}}class Q{static calculateBaseDamage(e,t,a,s,n){const i=e.level*2/5+2,c=s/n;return Math.floor(i*a.power*c/50)+2}static applyCriticalHit(e,t,a){var c;const n=((c=t.specialEffects)==null?void 0:c.find(o=>o.type==="critRateUp"))?.125:.0625;return Math.random()<n?(a("급소에 맞았다!",!0),Math.floor(e*1.5)):e}static applySTAB(e,t,a){const s=a.charAt(0).toUpperCase()+a.slice(1);return t.englishType.includes(s)?Math.floor(e*O.STAB_MULTIPLIER):e}static applyRandomFactor(e){const t=(Math.floor(Math.random()*(O.RANDOM_FACTOR_MAX-O.RANDOM_FACTOR_MIN+1))+O.RANDOM_FACTOR_MIN)/100;return Math.floor(e*t)}static applyMultiHit(e,t,a){var i;const s=(i=t.specialEffects)==null?void 0:i.find(c=>c.type==="multiHit"),n=(s==null?void 0:s.value)||1;return n>1?(a(`${n}회 연속 공격!`,!0),e*n):e}static ensureMinimumDamage(e){return Math.max(1,e)}}class Se{static applyAbilityEffects(e,t,a,s,n,i){let c=e;return a.abilities.includes("levitate")&&n==="Ground"?(i(A.LEVITATE_AVOID(a.name),!1),0):(a.abilities.includes("thick-fat")&&(n==="Fire"||n==="Ice")&&(c=Math.floor(c*O.ABILITY_MULTIPLIER)),c)}static applyStatusEffects(e,t,a){let s=e;return t.status==="Burned"&&a.category==="Physical"&&(s=Math.floor(s*.5)),s}static applyWeatherEffects(e,t,a){let s=e;switch(a){case"sunny":t==="Fire"?s=Math.floor(s*1.5):t==="Water"&&(s=Math.floor(s*.5));break;case"rain":t==="Water"?s=Math.floor(s*1.5):t==="Fire"&&(s=Math.floor(s*.5));break}return s}static applyTerrainEffects(e,t,a){let s=e;switch(a){case"electric":t==="Electric"&&(s=Math.floor(s*1.3));break;case"grassy":t==="Grass"&&(s=Math.floor(s*1.3));break;case"psychic":t==="Psychic"&&(s=Math.floor(s*1.3));break;case"misty":t==="Dragon"&&(s=Math.floor(s*.5));break}return s}}class ve{static getTypeEffectiveness(e,t){return X.getTypeEffectiveness(e,t)}static capitalizeFirstLetter(e){return X.capitalizeFirstLetter(e)}static calculateDamage(e,t,a,s){const n=this.capitalizeFirstLetter(a.englishType),i=ie.getEffectiveStat(e,"attack"),c=ie.getEffectiveStat(t,"defense");let o=Q.calculateBaseDamage(e,t,a,i,c);o=Se.applyStatusEffects(o,e,a),o=Q.applyCriticalHit(o,a,s),o=Q.applySTAB(o,e,a.englishType);const f=t.englishType.map(M=>this.capitalizeFirstLetter(M)),y=X.getMultiTypeEffectiveness(n,f);return o=Math.floor(o*y),o=Se.applyAbilityEffects(o,e,t,a,n,s),o===0?(X.logEffectiveness(0,t.name,s),0):(o=Q.applyRandomFactor(o),o=Q.applyMultiHit(o,a,s),X.logEffectiveness(y,t.name,s),Q.ensureMinimumDamage(o))}static logEffectiveness(e,t,a){X.logEffectiveness(e,t,a)}}class ke{static executePlayerTurn(e,t,a,s,n){return $(this,null,function*(){if(e.pp<=0)return s(A.NO_PP(e.name),!0),{damage:0,battleEnded:!1};if(!Z.canAct(t,s))return{damage:0,battleEnded:!1};n.playerAttacking.value=!0,yield this.delay(ne.ATTACK),n.playerAttacking.value=!1;const i=ve.calculateDamage(t,a,e,s);return a.hp=Math.max(0,a.hp-i),s(A.USED_MOVE(t.name,e.name,i),!0),yield this.applyMoveEffects(e,t,a,i,s),this.consumePP(e,t),n.opponentTakingDamage.value=!0,yield this.delay(ne.DAMAGE),n.opponentTakingDamage.value=!1,a.hp===0?(s(`${A.FAINTED(a.name)} ${A.YOU_WIN}`,!0),{damage:i,battleEnded:!0,winnerIsPlayer:!0}):Z.processEndOfTurnEffects(a,s)?(s(`${A.FAINTED(a.name)} ${A.YOU_WIN}`,!0),{damage:i,battleEnded:!0,winnerIsPlayer:!0}):{damage:i,battleEnded:!1}})}static executeOpponentTurn(e,t,a,s){return $(this,null,function*(){if(!Z.canAct(t,a))return{damage:0,battleEnded:!1};if(Z.processEndOfTurnEffects(e,a))return a(`${A.FAINTED(e.name)} ${A.YOU_LOSE}`,!1),{damage:0,battleEnded:!0,winnerIsPlayer:!1};const n=this.selectOpponentMove(t);s.opponentAttacking.value=!0,yield this.delay(ne.ATTACK),s.opponentAttacking.value=!1;const i=ve.calculateDamage(t,e,n,a);return e.hp=Math.max(0,e.hp-i),a(A.USED_MOVE(t.name,n.name,i),!1),yield this.applyMoveEffects(n,t,e,i,a),s.playerTakingDamage.value=!0,yield this.delay(ne.DAMAGE),s.playerTakingDamage.value=!1,e.hp===0?(a(`${A.FAINTED(e.name)} ${A.YOU_LOSE}`,!1),{damage:i,battleEnded:!0,winnerIsPlayer:!1}):{damage:i,battleEnded:!1}})}static applyMoveEffects(e,t,a,s,n){return $(this,null,function*(){var i,c,o;if((i=e.statChanges)!=null&&i.length&&ie.applyStatChanges(a,e.statChanges,n),(c=e.selfStatChanges)!=null&&c.length&&ie.applyStatChanges(t,e.selfStatChanges,n),(o=e.specialEffects)!=null&&o.length){const f=ie.processSpecialEffects(e,t,a,s,n);if(f.recoilDamage>0&&(t.hp=Math.max(0,t.hp-f.recoilDamage)),f.drainHeal>0){const y=Math.min(f.drainHeal,t.maxHp-t.hp);t.hp+=y}}Z.applyStatusEffect(e,t,a,n)})}static selectOpponentMove(e){const t=e.moves.filter(a=>a.pp>0);return t.length===0?e.moves[0]:t[Math.floor(Math.random()*t.length)]}static consumePP(e,t){const a=t.moves.find(s=>s.name===e.name);a&&a.pp>0&&a.pp--}static delay(e){return new Promise(t=>setTimeout(t,e))}}class At{static generateMoveTooltip(e){var s;const t=[];t.push(this.buildBasicInfoSection(e)),e.statusEffect&&t.push(this.buildStatusEffectSection(e));const a=this.buildStatChangeSection(e);return a&&t.push(a),(s=e.specialEffects)!=null&&s.length&&t.push(this.buildSpecialEffectsSection(e.specialEffects)),e.flavorText&&t.push(`
${e.flavorText}`),t.join("")}static buildBasicInfoSection(e){let t=`**${e.name}**
`;return t+=`타입: ${e.type}
`,t+=`위력: ${e.power||"—"}
`,t+=`정확도: ${e.accuracy?`${e.accuracy}%`:"—"}
`,t+=`분류: ${e.category||"—"}
`,t+=`PP: ${e.pp}/${e.maxPp}
`,e.priority&&e.priority!==0&&(t+=`우선도: ${e.priority>0?"+":""}${e.priority}
`),t}static buildStatusEffectSection(e){let t=`
📌 상태이상 효과:
`;return t+=`• ${this.getStatusEffectDescription(e.statusEffect)}
`,e.statusChance&&(t+=`• 발동 확률: ${e.statusChance}%
`),t}static buildStatChangeSection(e){var a,s;const t=[];return(a=e.statChanges)!=null&&a.length&&t.push(this.buildStatChangesSubsection("⚡ 상대 능력치 변화:",e.statChanges)),(s=e.selfStatChanges)!=null&&s.length&&t.push(this.buildStatChangesSubsection("💪 자신 능력치 변화:",e.selfStatChanges)),t.length?`
${t.join("")}`:null}static buildStatChangesSubsection(e,t){let a=`${e}
`;for(const s of t){const n=D.getStatName(s.stat),i=s.stages>0?"상승":"하락",c=Math.abs(s.stages);a+=`• ${n} ${i} ${c}단계
`}return a}static buildSpecialEffectsSection(e){let t=`
✨ 특수 효과:
`;for(const a of e)t+=`• ${this.getSpecialEffectDescription(a)}
`;return t}static getStatusEffectDescription(e){return e&&{Poisoned:"독 상태 - 매 턴 HP가 감소합니다",Paralyzed:"마비 상태 - 가끔 행동할 수 없고 스피드가 감소합니다",Burned:"화상 상태 - 매 턴 HP가 감소하고 물리공격력이 감소합니다",Frozen:"얼음 상태 - 행동할 수 없습니다 (불꽃 기술로 해제 가능)",Asleep:"잠 상태 - 몇 턴간 행동할 수 없습니다",Confused:"혼란 상태 - 가끔 자신을 공격할 수 있습니다"}[e]||""}static getSpecialEffectDescription(e){switch(e.type){case"recoil":return`반동 데미지 (가한 데미지의 ${Math.round((e.value||.25)*100)}%)`;case"drain":return`흡수 (가한 데미지의 ${Math.round((e.value||.5)*100)}% 회복)`;case"heal":return`자가 치유 (최대 HP의 ${Math.round((e.value||.5)*100)}% 회복)`;case"multiHit":return`${e.value||2}회 연속 공격`;case"flinch":return`풀죽음 효과 (${Math.round((e.chance||.3)*100)}% 확률)`;case"critRateUp":return"급소율 증가";case"priority":return`우선도 +${e.value||1}`;default:return e.type}}}const se=[{name:"chikorita",types:["grass"],names:{en:"Chikorita",ko:"치코리타",ja:"チコリータ",fr:"Germignon",de:"Endivie",es:"Chikorita",it:"Chikorita",zh:"chikorita"}},{name:"cyndaquil",types:["fire"],names:{en:"Cyndaquil",ko:"브케인",ja:"ヒノアラシ",fr:"Héricendre",de:"Feurigel",es:"Cyndaquil",it:"Cyndaquil",zh:"cyndaquil"}},{name:"totodile",types:["water"],names:{en:"Totodile",ko:"리아코",ja:"ワニノコ",fr:"Kaiminus",de:"Karnimani",es:"Totodile",it:"Totodile",zh:"totodile"}},{name:"sentret",types:["normal"],names:{en:"Sentret",ko:"꼬리선",ja:"オタチ",fr:"Fouinette",de:"Wiesor",es:"Sentret",it:"Sentret",zh:"sentret"}},{name:"hoothoot",types:["normal","flying"],names:{en:"Hoothoot",ko:"부우부",ja:"ホーホー",fr:"Hoothoot",de:"Hoothoot",es:"Hoothoot",it:"Hoothoot",zh:"hoothoot"}},{name:"ledyba",types:["bug","flying"],names:{en:"Ledyba",ko:"레디바",ja:"レディバ",fr:"Coxy",de:"Ledyba",es:"Ledyba",it:"Ledyba",zh:"ledyba"}},{name:"spinarak",types:["bug","poison"],names:{en:"Spinarak",ko:"페이검",ja:"イトマル",fr:"Mimigal",de:"Webarak",es:"Spinarak",it:"Spinarak",zh:"spinarak"}},{name:"chinchou",types:["water","electric"],names:{en:"Chinchou",ko:"초라기",ja:"チョンチー",fr:"Loupio",de:"Lampi",es:"Chinchou",it:"Chinchou",zh:"chinchou"}},{name:"pichu",types:["electric"],names:{en:"Pichu",ko:"피츄",ja:"ピチュー",fr:"Pichu",de:"Pichu",es:"Pichu",it:"Pichu",zh:"pichu"}},{name:"cleffa",types:["fairy"],names:{en:"Cleffa",ko:"삐",ja:"ピィ",fr:"Mélo",de:"Pii",es:"Cleffa",it:"Cleffa",zh:"cleffa"}},{name:"igglybuff",types:["normal","fairy"],names:{en:"Igglybuff",ko:"푸푸린",ja:"ププリン",fr:"Toudoudou",de:"Fluffeluff",es:"Igglybuff",it:"Igglybuff",zh:"igglybuff"}},{name:"togepi",types:["fairy"],names:{en:"Togepi",ko:"토게피",ja:"トゲピー",fr:"Togepi",de:"Togepi",es:"Togepi",it:"Togepi",zh:"togepi"}},{name:"natu",types:["psychic","flying"],names:{en:"Natu",ko:"네이티",ja:"ネイティ",fr:"Natu",de:"Natu",es:"Natu",it:"Natu",zh:"natu"}},{name:"mareep",types:["electric"],names:{en:"Mareep",ko:"메리프",ja:"メリープ",fr:"Wattouat",de:"Voltilamm",es:"Mareep",it:"Mareep",zh:"mareep"}},{name:"hoppip",types:["grass","flying"],names:{en:"Hoppip",ko:"통통코",ja:"ハネッコ",fr:"Granivol",de:"Hoppspross",es:"Hoppip",it:"Hoppip",zh:"hoppip"}},{name:"aipom",types:["normal"],names:{en:"Aipom",ko:"에이팜",ja:"エイパム",fr:"Capumain",de:"Griffel",es:"Aipom",it:"Aipom",zh:"aipom"}},{name:"sunkern",types:["grass"],names:{en:"Sunkern",ko:"해너츠",ja:"ヒマナッツ",fr:"Tournegrin",de:"Sonnkern",es:"Sunkern",it:"Sunkern",zh:"sunkern"}},{name:"yanma",types:["bug","flying"],names:{en:"Yanma",ko:"왕자리",ja:"ヤンヤンマ",fr:"Yanma",de:"Yanma",es:"Yanma",it:"Yanma",zh:"yanma"}},{name:"wooper",types:["water","ground"],names:{en:"Wooper",ko:"우파",ja:"ウパー",fr:"Axoloto",de:"Felino",es:"Wooper",it:"Wooper",zh:"wooper"}},{name:"murkrow",types:["dark","flying"],names:{en:"Murkrow",ko:"니로우",ja:"ヤミカラス",fr:"Cornèbre",de:"Kramurx",es:"Murkrow",it:"Murkrow",zh:"murkrow"}},{name:"misdreavus",types:["ghost"],names:{en:"Misdreavus",ko:"무우마",ja:"ムウマ",fr:"Feuforêve",de:"Traunfugil",es:"Misdreavus",it:"Misdreavus",zh:"misdreavus"}},{name:"unown",types:["psychic"],names:{en:"Unown",ko:"안농",ja:"アンノーン",fr:"Zarbi",de:"Icognito",es:"Unown",it:"Unown",zh:"unown"}},{name:"girafarig",types:["normal","psychic"],names:{en:"Girafarig",ko:"키링키",ja:"キリンリキ",fr:"Girafarig",de:"Girafarig",es:"Girafarig",it:"Girafarig",zh:"girafarig"}},{name:"pineco",types:["bug"],names:{en:"Pineco",ko:"피콘",ja:"クヌギダマ",fr:"Pomdepik",de:"Tannza",es:"Pineco",it:"Pineco",zh:"pineco"}},{name:"dunsparce",types:["normal"],names:{en:"Dunsparce",ko:"노고치",ja:"ノコッチ",fr:"Insolourdo",de:"Dummisel",es:"Dunsparce",it:"Dunsparce",zh:"dunsparce"}},{name:"gligar",types:["ground","flying"],names:{en:"Gligar",ko:"글라이거",ja:"グライガー",fr:"Scorplane",de:"Skorgla",es:"Gligar",it:"Gligar",zh:"gligar"}},{name:"snubbull",types:["fairy"],names:{en:"Snubbull",ko:"블루",ja:"ブルー",fr:"Snubbull",de:"Snubbull",es:"Snubbull",it:"Snubbull",zh:"snubbull"}},{name:"qwilfish",types:["water","poison"],names:{en:"Qwilfish",ko:"침바루",ja:"ハリーセン",fr:"Qwilfish",de:"Baldorfish",es:"Qwilfish",it:"Qwilfish",zh:"qwilfish"}},{name:"shuckle",types:["bug","rock"],names:{en:"Shuckle",ko:"단단지",ja:"ツボツボ",fr:"Caratroc",de:"Pottrott",es:"Shuckle",it:"Shuckle",zh:"shuckle"}},{name:"heracross",types:["bug","fighting"],names:{en:"Heracross",ko:"헤라크로스",ja:"ヘラクロス",fr:"Scarhino",de:"Skaraborn",es:"Heracross",it:"Heracross",zh:"heracross"}},{name:"sneasel",types:["dark","ice"],names:{en:"Sneasel",ko:"포푸니",ja:"ニューラ",fr:"Farfuret",de:"Sniebel",es:"Sneasel",it:"Sneasel",zh:"sneasel"}},{name:"teddiursa",types:["normal"],names:{en:"Teddiursa",ko:"깜지곰",ja:"ヒメグマ",fr:"Teddiursa",de:"Teddiursa",es:"Teddiursa",it:"Teddiursa",zh:"teddiursa"}},{name:"slugma",types:["fire"],names:{en:"Slugma",ko:"마그마그",ja:"マグマッグ",fr:"Limagma",de:"Schneckmag",es:"Slugma",it:"Slugma",zh:"slugma"}},{name:"swinub",types:["ice","ground"],names:{en:"Swinub",ko:"꾸꾸리",ja:"ウリムー",fr:"Marcacrin",de:"Quiekel",es:"Swinub",it:"Swinub",zh:"swinub"}},{name:"corsola",types:["water","rock"],names:{en:"Corsola",ko:"코산호",ja:"サニーゴ",fr:"Corayon",de:"Corasonn",es:"Corsola",it:"Corsola",zh:"corsola"}},{name:"remoraid",types:["water"],names:{en:"Remoraid",ko:"총어",ja:"テッポウオ",fr:"Rémoraid",de:"Remoraid",es:"Remoraid",it:"Remoraid",zh:"remoraid"}},{name:"delibird",types:["ice","flying"],names:{en:"Delibird",ko:"딜리버드",ja:"デリバード",fr:"Cadoizo",de:"Botogel",es:"Delibird",it:"Delibird",zh:"delibird"}},{name:"meganium",types:["grass"],names:{en:"Meganium",ko:"메가니움",ja:"メガニウム",fr:"Méganium",de:"Meganie",es:"Meganium",it:"Meganium",zh:"meganium"}},{name:"quilava",types:["fire"],names:{en:"Quilava",ko:"마그케인",ja:"マグマラシ",fr:"Feurisson",de:"Igelavar",es:"Quilava",it:"Quilava",zh:"quilava"}},{name:"typhlosion",types:["fire"],names:{en:"Typhlosion",ko:"블레이범",ja:"バクフーン",fr:"Typhlosion",de:"Tornupto",es:"Typhlosion",it:"Typhlosion",zh:"typhlosion"}},{name:"croconaw",types:["water"],names:{en:"Croconaw",ko:"엘리게이",ja:"アリゲイツ",fr:"Crocrodil",de:"Tyracroc",es:"Croconaw",it:"Croconaw",zh:"croconaw"}},{name:"feraligatr",types:["water"],names:{en:"Feraligatr",ko:"장크로다일",ja:"オーダイル",fr:"Aligatueur",de:"Impergator",es:"Feraligatr",it:"Feraligatr",zh:"feraligatr"}},{name:"furret",types:["normal"],names:{en:"Furret",ko:"다꼬리",ja:"オオタチ",fr:"Fouinar",de:"Wiesenior",es:"Furret",it:"Furret",zh:"furret"}},{name:"noctowl",types:["normal","flying"],names:{en:"Noctowl",ko:"야부엉",ja:"ヨルノズク",fr:"Noarfang",de:"Noctuh",es:"Noctowl",it:"Noctowl",zh:"noctowl"}},{name:"ledian",types:["bug","flying"],names:{en:"Ledian",ko:"레디안",ja:"レディアン",fr:"Coxyclaque",de:"Ledian",es:"Ledian",it:"Ledian",zh:"ledian"}},{name:"ariados",types:["bug","poison"],names:{en:"Ariados",ko:"아리아도스",ja:"アリアドス",fr:"Migalos",de:"Ariados",es:"Ariados",it:"Ariados",zh:"ariados"}},{name:"crobat",types:["poison","flying"],names:{en:"Crobat",ko:"크로뱃",ja:"クロバット",fr:"Nostenfer",de:"Iksbat",es:"Crobat",it:"Crobat",zh:"crobat"}},{name:"lanturn",types:["water","electric"],names:{en:"Lanturn",ko:"랜턴",ja:"ランターン",fr:"Lanturn",de:"Lanturn",es:"Lanturn",it:"Lanturn",zh:"lanturn"}},{name:"togetic",types:["fairy","flying"],names:{en:"Togetic",ko:"토게틱",ja:"トゲチック",fr:"Togetic",de:"Togetic",es:"Togetic",it:"Togetic",zh:"togetic"}},{name:"xatu",types:["psychic","flying"],names:{en:"Xatu",ko:"네이티오",ja:"ネイティオ",fr:"Xatu",de:"Xatu",es:"Xatu",it:"Xatu",zh:"xatu"}},{name:"flaaffy",types:["electric"],names:{en:"Flaaffy",ko:"보송송",ja:"モココ",fr:"Lainergie",de:"Waaty",es:"Flaaffy",it:"Flaaffy",zh:"flaaffy"}},{name:"ampharos",types:["electric"],names:{en:"Ampharos",ko:"전룡",ja:"デンリュウ",fr:"Pharamp",de:"Ampharos",es:"Ampharos",it:"Ampharos",zh:"ampharos"}},{name:"bellossom",types:["grass"],names:{en:"Bellossom",ko:"아르코",ja:"キレイハナ",fr:"Joliflor",de:"Blubella",es:"Bellossom",it:"Bellossom",zh:"bellossom"}},{name:"marill",types:["water","fairy"],names:{en:"Marill",ko:"마릴",ja:"マリル",fr:"Marill",de:"Marill",es:"Marill",it:"Marill",zh:"marill"}},{name:"azumarill",types:["water","fairy"],names:{en:"Azumarill",ko:"마릴리",ja:"マリルリ",fr:"Azumarill",de:"Azumarill",es:"Azumarill",it:"Azumarill",zh:"azumarill"}},{name:"sudowoodo",types:["rock"],names:{en:"Sudowoodo",ko:"꼬지모",ja:"ウソッキー",fr:"Simularbre",de:"Mogelbaum",es:"Sudowoodo",it:"Sudowoodo",zh:"sudowoodo"}},{name:"politoed",types:["water"],names:{en:"Politoed",ko:"왕구리",ja:"ニョロトノ",fr:"Tarpaud",de:"Quaxo",es:"Politoed",it:"Politoed",zh:"politoed"}},{name:"skiploom",types:["grass","flying"],names:{en:"Skiploom",ko:"두코",ja:"ポポッコ",fr:"Floravol",de:"Hubelupf",es:"Skiploom",it:"Skiploom",zh:"skiploom"}},{name:"jumpluff",types:["grass","flying"],names:{en:"Jumpluff",ko:"솜솜코",ja:"ワタッコ",fr:"Cotovol",de:"Papungha",es:"Jumpluff",it:"Jumpluff",zh:"jumpluff"}},{name:"sunflora",types:["grass"],names:{en:"Sunflora",ko:"해루미",ja:"キマワリ",fr:"Héliatronc",de:"Sonnflora",es:"Sunflora",it:"Sunflora",zh:"sunflora"}},{name:"quagsire",types:["water","ground"],names:{en:"Quagsire",ko:"누오",ja:"ヌオー",fr:"Maraiste",de:"Morlord",es:"Quagsire",it:"Quagsire",zh:"quagsire"}},{name:"espeon",types:["psychic"],names:{en:"Espeon",ko:"에브이",ja:"エーフィ",fr:"Mentali",de:"Psiana",es:"Espeon",it:"Espeon",zh:"espeon"}},{name:"umbreon",types:["dark"],names:{en:"Umbreon",ko:"블래키",ja:"ブラッキー",fr:"Noctali",de:"Nachtara",es:"Umbreon",it:"Umbreon",zh:"umbreon"}},{name:"slowking",types:["water","psychic"],names:{en:"Slowking",ko:"야도킹",ja:"ヤドキング",fr:"Roigada",de:"Laschoking",es:"Slowking",it:"Slowking",zh:"slowking"}},{name:"wobbuffet",types:["psychic"],names:{en:"Wobbuffet",ko:"마자용",ja:"ソーナンス",fr:"Qulbutoké",de:"Woingenau",es:"Wobbuffet",it:"Wobbuffet",zh:"wobbuffet"}},{name:"forretress",types:["bug","steel"],names:{en:"Forretress",ko:"쏘콘",ja:"フォレトス",fr:"Foretress",de:"Forstellka",es:"Forretress",it:"Forretress",zh:"forretress"}},{name:"steelix",types:["steel","ground"],names:{en:"Steelix",ko:"강철톤",ja:"ハガネール",fr:"Steelix",de:"Stahlos",es:"Steelix",it:"Steelix",zh:"steelix"}},{name:"granbull",types:["fairy"],names:{en:"Granbull",ko:"그랑블루",ja:"グランブル",fr:"Granbull",de:"Granbull",es:"Granbull",it:"Granbull",zh:"granbull"}},{name:"scizor",types:["bug","steel"],names:{en:"Scizor",ko:"핫삼",ja:"ハッサム",fr:"Cizayox",de:"Scherox",es:"Scizor",it:"Scizor",zh:"scizor"}},{name:"ursaring",types:["normal"],names:{en:"Ursaring",ko:"링곰",ja:"リングマ",fr:"Ursaring",de:"Ursaring",es:"Ursaring",it:"Ursaring",zh:"ursaring"}},{name:"magcargo",types:["fire","rock"],names:{en:"Magcargo",ko:"마그카르고",ja:"マグカルゴ",fr:"Volcaropod",de:"Magcargo",es:"Magcargo",it:"Magcargo",zh:"magcargo"}},{name:"piloswine",types:["ice","ground"],names:{en:"Piloswine",ko:"메꾸리",ja:"イノムー",fr:"Cochignon",de:"Keifel",es:"Piloswine",it:"Piloswine",zh:"piloswine"}},{name:"octillery",types:["water"],names:{en:"Octillery",ko:"대포무노",ja:"オクタン",fr:"Octillery",de:"Octillery",es:"Octillery",it:"Octillery",zh:"octillery"}},{name:"skarmory",types:["steel","flying"],names:{en:"Skarmory",ko:"무장조",ja:"エアームド",fr:"Airmure",de:"Panzaeron",es:"Skarmory",it:"Skarmory",zh:"skarmory"}},{name:"houndour",types:["dark","fire"],names:{en:"Houndour",ko:"델빌",ja:"デルビル",fr:"Malosse",de:"Hunduster",es:"Houndour",it:"Houndour",zh:"houndour"}},{name:"phanpy",types:["ground"],names:{en:"Phanpy",ko:"코코리",ja:"ゴマゾウ",fr:"Phanpy",de:"Phanpy",es:"Phanpy",it:"Phanpy",zh:"phanpy"}},{name:"stantler",types:["normal"],names:{en:"Stantler",ko:"노라키",ja:"オドシシ",fr:"Cerfrousse",de:"Damhirplex",es:"Stantler",it:"Stantler",zh:"stantler"}},{name:"smeargle",types:["normal"],names:{en:"Smeargle",ko:"루브도",ja:"ドーブル",fr:"Queulorior",de:"Farbeagle",es:"Smeargle",it:"Smeargle",zh:"smeargle"}},{name:"tyrogue",types:["fighting"],names:{en:"Tyrogue",ko:"배루키",ja:"バルキー",fr:"Debugant",de:"Rabauz",es:"Tyrogue",it:"Tyrogue",zh:"tyrogue"}},{name:"smoochum",types:["ice","psychic"],names:{en:"Smoochum",ko:"뽀뽀라",ja:"ムチュール",fr:"Lippouti",de:"Kussilla",es:"Smoochum",it:"Smoochum",zh:"smoochum"}},{name:"elekid",types:["electric"],names:{en:"Elekid",ko:"에레키드",ja:"エレキッド",fr:"Élekid",de:"Elekid",es:"Elekid",it:"Elekid",zh:"elekid"}},{name:"magby",types:["fire"],names:{en:"Magby",ko:"마그비",ja:"ブビィ",fr:"Magby",de:"Magby",es:"Magby",it:"Magby",zh:"magby"}},{name:"miltank",types:["normal"],names:{en:"Miltank",ko:"밀탱크",ja:"ミルタンク",fr:"Écrémeuh",de:"Miltank",es:"Miltank",it:"Miltank",zh:"miltank"}},{name:"raikou",types:["electric"],names:{en:"Raikou",ko:"라이코",ja:"ライコウ",fr:"Raikou",de:"Raikou",es:"Raikou",it:"Raikou",zh:"raikou"}},{name:"entei",types:["fire"],names:{en:"Entei",ko:"앤테이",ja:"エンテイ",fr:"Entei",de:"Entei",es:"Entei",it:"Entei",zh:"entei"}},{name:"suicune",types:["water"],names:{en:"Suicune",ko:"스이쿤",ja:"スイクン",fr:"Suicune",de:"Suicune",es:"Suicune",it:"Suicune",zh:"suicune"}},{name:"larvitar",types:["rock","ground"],names:{en:"Larvitar",ko:"애버라스",ja:"ヨーギラス",fr:"Embrylex",de:"Larvitar",es:"Larvitar",it:"Larvitar",zh:"larvitar"}},{name:"lugia",types:["psychic","flying"],names:{en:"Lugia",ko:"루기아",ja:"ルギア",fr:"Lugia",de:"Lugia",es:"Lugia",it:"Lugia",zh:"lugia"}},{name:"ho-oh",types:["fire","flying"],names:{en:"Ho-Oh",ko:"칠색조",ja:"ホウオウ",fr:"Ho-Oh",de:"Ho-Oh",es:"Ho-Oh",it:"Ho-Oh",zh:"ho-oh"}},{name:"celebi",types:["psychic","grass"],names:{en:"Celebi",ko:"세레비",ja:"セレビィ",fr:"Celebi",de:"Celebi",es:"Celebi",it:"Celebi",zh:"celebi"}},{name:"houndoom",types:["dark","fire"],names:{en:"Houndoom",ko:"헬가",ja:"ヘルガー",fr:"Démolosse",de:"Hundemon",es:"Houndoom",it:"Houndoom",zh:"houndoom"}},{name:"kingdra",types:["water","dragon"],names:{en:"Kingdra",ko:"킹드라",ja:"キングドラ",fr:"Hyporoi",de:"Seedraking",es:"Kingdra",it:"Kingdra",zh:"kingdra"}},{name:"donphan",types:["ground"],names:{en:"Donphan",ko:"코리갑",ja:"ドンファン",fr:"Donphan",de:"Donphan",es:"Donphan",it:"Donphan",zh:"donphan"}},{name:"porygon2",types:["normal"],names:{en:"Porygon2",ko:"폴리곤2",ja:"ポリゴン２",fr:"Porygon2",de:"Porygon2",es:"Porygon2",it:"Porygon2",zh:"porygon2"}},{name:"hitmontop",types:["fighting"],names:{en:"Hitmontop",ko:"카포에라",ja:"カポエラー",fr:"Kapoera",de:"Kapoera",es:"Hitmontop",it:"Hitmontop",zh:"hitmontop"}},{name:"blissey",types:["normal"],names:{en:"Blissey",ko:"해피너스",ja:"ハピナス",fr:"Leuphorie",de:"Heiteira",es:"Blissey",it:"Blissey",zh:"blissey"}},{name:"pupitar",types:["rock","ground"],names:{en:"Pupitar",ko:"데기라스",ja:"サナギラス",fr:"Ymphect",de:"Pupitar",es:"Pupitar",it:"Pupitar",zh:"pupitar"}},{name:"tyranitar",types:["rock","dark"],names:{en:"Tyranitar",ko:"마기라스",ja:"バンギラス",fr:"Tyranocif",de:"Despotar",es:"Tyranitar",it:"Tyranitar",zh:"tyranitar"}},{name:"bayleef",types:["grass"],names:{en:"Bayleef",ko:"베이리프",ja:"ベイリーフ",fr:"Macronium",de:"Lorblatt",es:"Bayleef",it:"Bayleef",zh:"bayleef"}},{name:"mantine",types:["water","flying"],names:{en:"Mantine",ko:"만타인",ja:"マンタイン",fr:"Démanta",de:"Mantax",es:"Mantine",it:"Mantine",zh:"mantine"}}];function Ct(){const r=P(null),e=P(null),t=P([]),a=P(!1),s=P(!1),n=P(!1),i=P(!1),c=P(!1),o=P(!1),f=P(!0),y=P("초기화 중..."),M=P(void 0),p=P(!1),d=P(null),k=j(()=>{if(!r.value||!e.value)return"linear-gradient(to bottom right, #a0a0a0, #c0c0c0)";const T=fe[G(r.value.englishType[0])]||"#a0a0a0",E=fe[G(e.value.englishType[0])]||"#c0c0c0";return`linear-gradient(to top right, ${T}, ${E})`});function F(T,E=!1){t.value.unshift({message:T,isPlayerTurn:E})}function R(){r.value=null,e.value=null,t.value=[],a.value=!1,s.value=!1}function I(T){var le;let E=se[Math.floor(Math.random()*se.length)],z=E.name;if(T)for(;z===T;)E=se[Math.floor(Math.random()*se.length)],z=E.name;const oe=((le=E.names)==null?void 0:le.ko)||z;return{englishName:z,displayName:oe}}function l(){return $(this,null,function*(){if(f.value=!0,y.value="모든 포켓몬 이름을 가져오는 중...",R(),se.length===0){F("포켓몬 데이터를 불러오는데 실패했습니다. 다시 시도해주세요.",!1),a.value=!0,f.value=!1,y.value="포켓몬 데이터 로딩 실패";return}y.value="포켓몬 선택 중...";const T=I(),E=I(T.englishName);y.value=`<b style="color: #007bff;">${T.displayName}</b>과(와) <b style="color: #dc3545;">${E.displayName}</b> 데이터를 가져오는 중...`;try{r.value=yield pe.fetchPokemonData(T.englishName,!0),e.value=yield pe.fetchPokemonData(E.englishName,!1),r.value&&e.value?(t.value=[{message:A.WILD_POKEMON_APPEARED(e.value.name),isPlayerTurn:!1},{message:A.GO_POKEMON(r.value.name),isPlayerTurn:!0}],a.value=!1):(F("포켓몬 데이터를 불러오는데 실패했습니다. 다시 시도해주세요.",!1),a.value=!0)}catch(z){console.error("배틀 초기화 중 오류 발생:",z),F("포켓몬 데이터를 불러오는데 실패했습니다. 다시 시도해주세요.",!1),a.value=!0}f.value=!1,y.value=""})}function v(T){return $(this,null,function*(){if(a.value||s.value)return;s.value=!0,M.value=void 0;const E={playerAttacking:n,opponentTakingDamage:i,opponentAttacking:c,playerTakingDamage:o};try{if((yield ke.executePlayerTurn(T,r.value,e.value,F,E)).battleEnded){a.value=!0,s.value=!1;return}setTimeout(()=>$(this,null,function*(){(yield ke.executeOpponentTurn(r.value,e.value,F,E)).battleEnded&&(a.value=!0),yield b(),s.value=!1}),ne.TURN_DELAY)}catch(z){console.error("턴 처리 중 오류 발생:",z),s.value=!1}})}function b(){return $(this,null,function*(){var T,E;try{(T=r.value)!=null&&T.allMoves&&(r.value.moves=yield pe.processPokemonMoves(r.value.allMoves)),(E=e.value)!=null&&E.allMoves&&(e.value.moves=yield pe.processPokemonMoves(e.value.allMoves))}catch(z){console.error("기술 새로고침 중 오류 발생:",z)}})}function N(){l()}function x(T){return At.generateMoveTooltip(T)}function U(T){p.value||(M.value=x(T))}function V(){p.value||(M.value=void 0)}function K(T){d.value=T,p.value=!0,M.value=x(T)}function H(){p.value=!1,d.value=null,M.value=void 0}return{playerPokemon:r,opponentPokemon:e,battleLog:t,isBattleOver:a,processingTurn:s,playerAttacking:n,opponentTakingDamage:i,opponentAttacking:c,playerTakingDamage:o,isLoading:f,loadingMessage:y,hoveredMoveDescription:M,isPinnedTooltip:p,pinnedMove:d,battleScreenBackground:k,initializeBattle:l,handlePlayerMove:v,restartBattle:N,handleMouseoverMove:U,handleMouseleaveMove:V,handleRightClickMove:K,closePinnedTooltip:H}}const wt={key:0,class:"loading-screen"},Pt=["innerHTML"],$t={class:"battle-top"},zt={class:"opponent-pokemon-container"},Dt={class:"player-pokemon-container"},Ft={key:0,class:"tooltip-header"},jt={class:"tooltip-title"},Ot={class:"tooltip-content"},Nt={class:"move-description-text"},Bt={class:"battle-bottom"},Rt={class:"battle-controls"},It={key:0,class:"move-buttons-grid"},Ht=te({__name:"BattleScreen",setup(r){const e=P(!1),{playerPokemon:t,opponentPokemon:a,battleLog:s,isBattleOver:n,processingTurn:i,playerAttacking:c,opponentTakingDamage:o,opponentAttacking:f,playerTakingDamage:y,isLoading:M,loadingMessage:p,hoveredMoveDescription:d,isPinnedTooltip:k,pinnedMove:F,battleScreenBackground:R,initializeBattle:I,handlePlayerMove:l,restartBattle:v,handleMouseoverMove:b,handleMouseleaveMove:N,handleRightClickMove:x,closePinnedTooltip:U}=Ct();ze(()=>$(this,null,function*(){yield I()}));const V=K=>{e.value=K};return(K,H)=>{var T;return g(M)?(m(),S("div",wt,[u("div",{innerHTML:g(p)},null,8,Pt)])):g(t)&&g(a)?(m(),S("div",{key:1,class:"battle-screen",style:_({background:g(R)})},[u("div",$t,[u("div",zt,[q(de,{pokemon:g(a),"is-attacking":g(f),"is-taking-damage":g(o),"is-opponent":!0,"show-overlay":e.value,onOverlayToggle:V},null,8,["pokemon","is-attacking","is-taking-damage","show-overlay"]),q(ge,{class:"effectiveness-display",attackerTypes:g(a).englishType,defenderTypes:g(t).englishType,displayAttackerTypes:g(a).type,displayDefenderTypes:g(t).type},null,8,["attackerTypes","defenderTypes","displayAttackerTypes","displayDefenderTypes"])]),u("div",Dt,[q(ge,{class:"effectiveness-display",attackerTypes:g(t).englishType,defenderTypes:g(a).englishType,displayAttackerTypes:g(t).type,displayDefenderTypes:g(a).type},null,8,["attackerTypes","defenderTypes","displayAttackerTypes","displayDefenderTypes"]),q(de,{pokemon:g(t),"is-attacking":g(c),"is-taking-damage":g(y),"show-overlay":e.value,onOverlayToggle:V},null,8,["pokemon","is-attacking","is-taking-damage","show-overlay"])]),g(d)?(m(),S("div",{key:0,class:ee(["move-description-display",{pinned:g(k)}])},[g(k)?(m(),S("div",Ft,[u("span",jt,h((T=g(F))==null?void 0:T.name)+" 정보",1),u("button",{class:"close-button",onClick:H[0]||(H[0]=(...E)=>g(U)&&g(U)(...E))},"✕")])):w("",!0),u("div",Ot,[u("pre",Nt,h(g(d)),1)])],2)):w("",!0)]),u("div",Bt,[q(Et,{logs:g(s)},null,8,["logs"]),u("div",Rt,[g(n)?w("",!0):(m(),S("div",It,[(m(!0),S(J,null,re(g(t).moves,E=>(m(),De(vt,{key:E.name,move:E,"opponent-types":g(a).englishType,onClick:z=>g(l)(E),onMouseoverMove:g(b),onMouseleaveMove:g(N),onRightClickMove:g(x),disabled:g(i)},null,8,["move","opponent-types","onClick","onMouseoverMove","onMouseleaveMove","onRightClickMove","disabled"]))),128))])),g(n)?(m(),S("button",{key:1,onClick:H[1]||(H[1]=(...E)=>g(v)&&g(v)(...E)),class:"restart-button"},"Restart Battle")):w("",!0)])])],4)):w("",!0)}}}),Lt=te({__name:"App",setup(r){return(e,t)=>(m(),S("main",null,[q(Ht)]))}});const be=Fe(Lt);be.config.errorHandler=(r,e,t)=>{L.logError(r,`Vue Error: ${t}`)};window.addEventListener("error",r=>{L.logError(new Error(r.message),"Global Error")});window.addEventListener("unhandledrejection",r=>{L.logError(new Error(r.reason),"Unhandled Promise Rejection")});be.mount("#app");
